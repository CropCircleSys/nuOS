#!/bin/sh
set -e; set -u; set -C

# nuOS 0.0.9.3b0 - bin/nu_vm - LICENSE: MOZ_PUB
#
# Copyright (c) 2008-2015 Chad Jacob Milios and Crop Circle Systems, Inc.
# All rights reserved.
#
# This Source Code Form is subject to the terms of the Mozilla Public License, v2.0.
# If a copy of the MPL was not distributed alongside this file, you can obtain one at
# http://mozilla.org/MPL/2.0/ . This software project is not affiliated with the Mozilla
# Foundation.
#
# Official updates and community support available at https://nuos.org .
# Other licensing options and professional services available at https://ccsys.com .

NUOS_VER=0.0.9.3b0

. "$(dirname "$(realpath "$0")")/../lib/nu_system.sh"

while getopts ab:c:C:d:De:fh:ij:lLm:nNo:Or:sSu:U:vx: OPT; do case $OPT in
	a) OPT_ADD=y;;
	b) BRIDGE_IFACE=$OPTARG;;
	c) VM_CPUS=$OPTARG;;
	C) CHROOTDIR=$OPTARG;;
	d) push VM_HDDS ${OPTARG#/dev/};;
	D) OPT_DELETE=y;;
	e) ETHERNET_CARD=$OPTARG;;
	f) OPT_FORCE=y;;
	h) HOST_NAME=$OPTARG;;
	i) OPT_INIT=y;;
	j) VM_NAME=$OPTARG;;
	l) OPT_LIST_RUNNING=y;;
	L) OPT_LIST_ALL=y;;
	m) VM_MEM_MB=$OPTARG;;
	n) OPT_VNC_ON=y;;
	N) OPT_VNC_OFF=y;;
	o) OS_TYPE=$OPTARG;;
	O) OPT_LIST_OS_TYPES=y;;
	s) OPT_START=y;;
	S) OPT_STOP=y;;
	r) STORAGE_BUS=$OPTARG;;
	u) push ADD_USERS $OPTARG;;
	U) push DEL_USERS $OPTARG;;
	v) OPT_VERBOSE=y;;
	x) push DEL_HDDS $OPTARG;;
esac; done; shift $(($OPTIND-1))
[ $# = 0 ]

[ -z "${CHROOTDIR-}" ] || exit 43 # CHROOTDIR is not supported, though we want to some day

. "$(dirname "$(realpath "$0")")/../lib/nu_common.sh"

: ${VM_NAME:=box}
: ${CHIPSET:=ich9} # can set to piix3

if [ -n "${ADD_USERS-}" ]; then
	pw groupmod vboxusers -m "$ADD_USERS"
	done=y
fi
if [ -n "${DEL_USERS-}" ]; then
	pw groupmod vboxusers -d "$DEL_USERS"
	done=y
fi
if [ -n "${OPT_INIT-}" ]; then
	kldload vboxdrv
	service vboxnet onestart
	cat >> "${CHROOTDIR-}/boot/loader.conf.local" <<'EOF'
vboxdrv_load="YES"
EOF
	sister enable_svc ${CHROOTDIR:+-C "$CHROOTDIR"} vboxnet
	echo "Configured vm service."
	done=y
fi
[ -z "${done-}" ] || exit 0

[ `whoami` != root ]

[ -d ~/.config/VirtualBox ] || VBoxManage setproperty machinefolder ~/.config/VirtualBox/Machines

if [ -n "${OPT_LIST_RUNNING-}" ]; then
	VBoxManage list runningvms | cut -w -f 1 | xargs
	done=y
fi
if [ -n "${OPT_LIST_ALL-}" ]; then
	VBoxManage list vms | cut -w -f 1 | xargs
	done=y
fi
if [ -n "${OPT_LIST_OS_TYPES-}" ]; then
	VBoxManage list ostypes | grep ^ID: | cut -w -f 2 | xargs
	done=y
fi
[ -z "${done-}" ] || exit 0

require_cfgfile () {
	if [ -z "${cfgfile-}" ]; then
		cfgfile=~"/.config/VirtualBox/Machines/$VM_NAME/$VM_NAME.vbox"
		if [ ! -e "$cfgfile" ]; then
			cfgfile=`VBoxManage showvminfo --machinereadable "$VM_NAME" | grep ^CfgFile= | sed -Ee 's/^.*="(.+)"$/\1/'`
			[ -n "$cfgfile" ]
		fi
		cfgdir=`dirname "$cfgfile"`
	fi
}

if [ -n "${OPT_START-}" ]; then
	if [ -n "${OPT_STOP-}" ]; then
		[ -n "${OPT_FORCE-}" ] || (echo 'Error: You must also specify the -f flag (OPT_FORCE) to perform a hard reset.' && exit 1)
		VBoxManage controlvm "$VM_NAME" reset
	else
		VBoxManage startvm "$VM_NAME" --type headless
	fi
	exit 0
elif [ -n "${OPT_STOP-}" ]; then
	if [ -n "${OPT_FORCE-}" ]; then
		VBoxManage controlvm "$VM_NAME" poweroff
		echo "Cut off power to vm $VM_NAME forcefully."
	else
		VBoxManage controlvm "$VM_NAME" acpipowerbutton
		echo "Sent vm $VM_NAME the graceful shutdown request signal."
	fi
	exit 0
elif [ -n "${OPT_DELETE-}" ]; then
	[ -n "${OPT_FORCE-}" ] || (echo 'Error: You must also specify the -f flag (OPT_FORCE) to delete a vm.' && exit 1)
	require_cfgfile
	VBoxManage unregistervm "$VM_NAME" --delete
	rm "$cfgdir"/*-nu_vm.vmdk 2> /dev/null || true
	rmdir "$cfgdir" 2> /dev/null || true
	echo "Deleted vm $VM_NAME successfully."
	exit 0
fi

nuos_init

if [ -n "${OPT_ADD-}" ]; then
	echo 'creating vm     -j VM_NAME        ' $VM_NAME
	#echo 'host name       -h HOST_NAME      ' ${HOST_NAME:=$VM_NAME.$HOST}
	echo 'num cpus        -c VM_CPUS        ' ${VM_CPUS:=`sysctl -n kern.smp.cpus`}
	echo 'mem megabytes   -m VM_MEM_MB      ' ${VM_MEM_MB:=1024}
	echo 'os type         -o OS_TYPE        ' ${OS_TYPE:=FreeBSD_64}
	echo -n 'connect hdds    -d VM_HDDS         ' && [ -n "${VM_HDDS-}" ] && echo $VM_HDDS || echo null
	echo
fi

maybe_yell

if [ -n "${VM_HDDS-}" ]; then
	for disk in $VM_HDDS; do
		case "$disk" in
			cd:*)
				[ -r "`realpath ${disk#cd:}`" ]
			;;
			*)
				[ -w /dev/$disk ]
			;;
		esac
	done
fi

require_hbaname () {
	if [ -z "${hbaname-}" ]; then
		hbaname=`VBoxManage showvminfo --machinereadable "$VM_NAME" | grep -E '^storagecontrollername[[:digit:]]' | tail -n 1 | sed -Ee 's/^.*="(.+)"$/\1/'`
		[ -n "$hbaname" ]
		hbaname_noblank=`echo "$hbaname" | tr -d '[[:space:]]/'`
	fi
}

require_cfgfile () {
	if [ -z "${cfgfile-}" ]; then
		cfgfile=`VBoxManage showvminfo --machinereadable "$VM_NAME" | grep ^CfgFile= | sed -Ee 's/^.*="(.+)"$/\1/'`
		[ -n "$cfgfile" ]
		cfgdir=`dirname "$cfgfile"`
	fi
}

if [ -n "${OPT_ADD-}" ]; then
	: ${STORAGE_BUS:=sata}
	VBoxManage createvm --name "$VM_NAME" --ostype "$OS_TYPE" --register
	VBoxManage modifyvm "$VM_NAME" --rtcuseutc on --hwvirtex on --ioapic on --chipset $CHIPSET --hpet on --cpus "$VM_CPUS" --nictype1 ${ETHERNET_CARD:-virtio} ${BRIDGE_IFACE:+--nic1 bridged --bridgeadapter1 $BRIDGE_IFACE} --memory "$VM_MEM_MB" --vram 16 --mouse usb --keyboard usb
	case $STORAGE_BUS in
		sata) STORAGE_CARD=IntelAHCI STORAGE_PORTS=30;;
		scsi) STORAGE_CARD=LSILogic STORAGE_PORTS=16;;
		sas) STORAGE_CARD=LSILogicSAS STORAGE_PORTS=8;;
	esac
	hbaname=${STORAGE_BUS}0
	hbaname_noblank=$hbaname
	VBoxManage storagectl "$VM_NAME" --name $hbaname --add $STORAGE_BUS --controller $STORAGE_CARD --portcount $STORAGE_PORTS
	done=y
else
	if [ -n "${DEL_HDDS-}" ]; then
		require_cfgfile
		require_hbaname
		for port in $DEL_HDDS; do
			media=`VBoxManage showvminfo --machinereadable "$VM_NAME" | grep -E ^\"\?$hbaname-$port-0\"\?= | sed -Ee 's/^.*="(.+)"$/\1/'`
			if [ -n "$media" -a "$media" != none ]; then
				VBoxManage storageattach "$VM_NAME" --storagectl "$hbaname" --port $port --device 0 --medium none
				if [ "$media" != "${media#$cfgdir/}" -a "$media" != "${media%-nu_vm.vmdk}" ]; then
					delete=y
				else
					delete=
				fi
				if [ -n "$delete" ]; then
					VBoxManage closemedium disk "$media" --delete 2> /dev/null || rm "$media"
				else
					VBoxManage closemedium disk "$media" 2> /dev/null || true
				fi
				done=y
			fi
		done
	fi
fi

if [ -n "${OPT_VNC_ON-}" ]; then
	require_cfgfile
	if [ -n "${VNC_IP-}" ] || [ -z "`sed -n -Ee '/^[[:blank:]]*<VRDEProperties>$/,/^[[:blank:]]*<\/VRDEProperties>$/{/^[[:blank:]]*<Property name="TCP\/Address"/p;}' "$cfgfile"`" ]; then
		set_vnc_ip=y
	fi
	if [ -n "${VNC_PORT-}" ] || [ -z "`sed -n -Ee '/^[[:blank:]]*<VRDEProperties>$/,/^[[:blank:]]*<\/VRDEProperties>$/{/^[[:blank:]]*<Property name="TCP\/Ports"/p;}' "$cfgfile"`" ]; then
		set_vnc_port=y
	fi
	VBoxManage modifyvm "$VM_NAME" --vrde on --vrdemulticon on ${set_vnc_ip+--vrdeaddress ${VNC_IP-172.31.0.1}} ${set_vnc_port+--vrdeport ${VNC_PORT-5900}} 2> /dev/null || (
		[ -z "${set_vnc_ip-}" ] || VBoxManage controlvm "$VM_NAME" vrdeproperty TCP/Address=${VNC_IP-172.31.0.1}
		[ -z "${set_vnc_port-}" ] || VBoxManage controlvm "$VM_NAME" vrdeport ${VNC_PORT-5900}
		VBoxManage controlvm "$VM_NAME" vrde on
	)
	done=y
elif [ -n "${OPT_VNC_OFF-}" ]; then
	VBoxManage modifyvm "$VM_NAME" --vrde off 2> /dev/null || VBoxManage controlvm "$VM_NAME" vrde off
	done=y
fi
if [ -n "${VNC_PASS-}" ]; then
	VBoxManage modifyvm "$VM_NAME" --vrdeproperty VNCPassword="$VNC_PASS" 2> /dev/null || VBoxManage controlvm "$VM_NAME" vrdeproperty VNCPassword="$VNC_PASS"
	done=y
fi

if [ -n "${VM_HDDS-}" ]; then
	require_cfgfile
	require_hbaname
	for disk in $VM_HDDS; do
		nextport=`VBoxManage showvminfo --machinereadable "$VM_NAME" | grep -E ^\"\?$hbaname-[[:digit:]]+-[[:digit:]]\"\?=\"\(none\|emptydrive\)\" | head -n 1`
		nextport=${nextport%-*}
		nextport=${nextport##*-}
		case "$disk" in
			cd:*)
				VBoxManage storageattach "$VM_NAME" --storagectl "$hbaname" --type dvddrive --port $nextport --device 0 --medium "`realpath ${disk#cd:}`"
			;;
			*)
				rand=`sister nu_randpw -b 6`
				vmdk="$cfgdir/${hbaname_noblank}_port${nextport}_$rand-nu_vm.vmdk"
				VBoxManage internalcommands createrawvmdk -filename "$vmdk" -rawdisk /dev/$disk
				VBoxManage storageattach "$VM_NAME" --storagectl "$hbaname" --type hdd --nonrotational on --discard on --port $nextport --device 0 --medium "$vmdk" 2> /dev/null || true
			;;
		esac
		echo "Connected disk $disk to vm $VM_NAME on port $nextport."
	done
	done=y
fi

[ -n "${done-}" ] && echo "Configured vm $VM_NAME successfully."
