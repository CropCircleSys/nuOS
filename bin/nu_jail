#!/bin/sh
set -e; set -u; set -C

# nuOS 0.0.11.3a0 - bin/nu_jail
#
# Copyright (c) 2008-2019 Chad Jacob Milios and Crop Circle Systems.
# All rights reserved.
#
# This Source Code Form is subject to the terms of the Simplified BSD License.
# If a copy of the Simplified BSD License was not distributed alongside this file, you can
# obtain one at https://www.freebsd.org/copyright/freebsd-license.html . This software
# project is not affiliated with the FreeBSD Project.
#
# Official updates and community support available at https://nuos.org .
# Professional services available at https://ccsys.com .

NUOS_VER=0.0.11.3a0

. "$(dirname "$(realpath "$0")")/../lib/nu_system.sh"

while getopts a:Ab:C:dfh:i:I:j:mn:o:O:p:Pqs:S:t:T:u:vwx OPT; do case $OPT in
	a) ADMIN_ACCT=$OPTARG;;
	A) OPT_PUBLIC_ALIAS=y;;
	b) BD_ACCT=$OPTARG;;
	C) CHROOTDIR=$OPTARG;;
	d) OPT_DELETE=y;;
	f) OPT_FORCE_DELETE=y;;
	h) JAIL_HOST=$OPTARG;;
	i) JAIL_IP=$OPTARG;;
	I) push LISTEN_SERVICE $OPTARG;;
	j) JAIL_NAME=$OPTARG;;
	m) OPT_MOUNT_FSTAB=y;;
	n) ALIAS_IP=$OPTARG;;
	o) JAIL_OS=$OPTARG;;
	O) push CONNECT_SERVICE $OPTARG;;
	p) POOL_NAME=$OPTARG;;
	P) OPT_PUBLIC_LISTEN_SERVICE=y;;
	q) OPT_QUICK=y;;
	s) JAIL_SNAP=$OPTARG;;
	S) push SERVICE $OPTARG;;
	t) JAIL_TYPE=$OPTARG;; # jail (default), clone, public or vnet
	T) push CONNECT_TARGETS $OPTARG;;
	u) USER_ACCT=$OPTARG;;
	v) OPT_VERBOSE=y;;
	w) OPT_RW_SRC=y;;
	x) ADMIN_ACCT=; BD_ACCT=; USER_ACCT=;;
esac; done; shift $(($OPTIND-1))
[ $# = 0 ]

. "$(dirname "$(realpath "$0")")/../lib/nu_common.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_admin.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_jail.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_collection.sh"

baseos_init
nuos_init
: ${POOL_NAME:=$POOL_BOOT_NAME}

collection_vars_init
jail_vars_init
admin_init
: ${PUBLIC_INTERFACE:=net0}

maybe_pause
maybe_yell

jail_dir=`dirname "${CHROOTDIR-}$JAIL_PATH"`

add_our_jail_to_hostfile () {
	cat >> "$1" <<EOF
$JAIL_IP		$JAIL_HOST $JAIL_NAME.jail $JAIL_NAME
EOF
}

remove_our_jail_from_hostfile () {
	sed -i '' -E -e "/^[^#]*[[:<:]]$JAIL_NAME\\.jail[[:>:]]/d" "$1"
}

if srsly "${OPT_DELETE-}"; then
	if ! srsly "${OPT_FORCE_DELETE-}"; then
		read -p "Are you sure you want to delete the jail '$JAIL_NAME' from configuration and all associated data from '$JAIL_DATA'? Type 'absolutely' to confirm: " confirm
		if [ "$confirm" != absolutely ]; then
			echo Action canceled.
			exit 1
		fi 
	fi
	jail -r $JAIL_NAME_ || true
	sed -i '' -e "/^$JAIL_NAME_ {\$/,/^}\$/d" "${CHROOTDIR-}/etc/jail.conf"
	remove_our_jail_from_hostfile "${CHROOTDIR-}/etc/hosts"
	for j in `ls "$jail_dir"`; do
		remove_our_jail_from_hostfile "$jail_dir/$j/etc/hosts" || true
	done
	
	[ ! -f "${CHROOTDIR-}/etc/fstab.$JAIL_NAME_" ] || mv "${CHROOTDIR-}/etc/fstab.$JAIL_NAME_" "${CHROOTDIR-}/etc/fstab.$JAIL_NAME_.`env TZ=UTC date +%Y-%m-%d-%H%M%S`.removed_from_service"

	zfs list -H -r $JAIL_DATA | cut -w -f 1 | tail -r | xargs -n1 zfs destroy
	rmdir "${CHROOTDIR-}$JAIL_PATH"
	exit
fi

if canhas "${SERVICE-}"; then
	push LISTEN_SERVICE $SERVICE
	push CONNECT_SERVICE $SERVICE
fi
if canhas "${CONNECT_TARGETS-}"; then
	ct_rule_n=$((`{ echo 50; sed -nEe '/^[[:blank:]]*exec.poststart[[:>:]]/{/"ipfw add [56789][[:digit:]] /{s/^.*(ipfw add [56789][[:digit:]])/\1/;s/ipfw add ([56789][[:digit:]]).*$/\1/;p;};}' "${CHROOTDIR-}/etc/jail.conf"; } | sort -n | tail -n 1` + 1))
	CONNECT_TARGETS=`echo $CONNECT_TARGETS | sed -e 's/ /.jail, /g;s/$/.jail/'`
	[ $ct_rule_n -le 99 -a $ct_rule_n -ge 51 ]
fi
if canhas "${LISTEN_SERVICE-}" || canhas "${CONNECT_SERVICE-}"; then
	[ $JAIL_TYPE = jail ]
	fw_rule_n=$((`{ echo 200; sed -nEe '/^[[:blank:]]*exec.poststart[[:>:]]/{/"ipfw add 1[[:digit:]][[:digit:]] /{s/^.*(ipfw add 1[[:digit:]][[:digit:]])/\1/;s/ipfw add (1[[:digit:]][[:digit:]]).*$/\1/;p;};}' "${CHROOTDIR-}/etc/jail.conf"; } | sort -n | head -n 1` - 1))
	[ $fw_rule_n -le 199 -a $fw_rule_n -ge 101 ]
	if canhas "${LISTEN_SERVICE-}" && srsly "${OPT_PUBLIC_LISTEN_SERVICE-}"; then
		fwd_rule_n=$((`{ echo 50; sed -nEe '/^[[:blank:]]*exec.poststart[[:>:]]/{/"ipfw add [1-4]?[[:digit:]] /{s/^.*(ipfw add [1-4]?[[:digit:]])/\1/;s/ipfw add ([1-4]?[[:digit:]]).*$/\1/;p;};}' "${CHROOTDIR-}/etc/jail.conf"; } | sort -n | head -n 1` - 1))
		[ $fwd_rule_n -le 49 -a $fwd_rule_n -ge 1 ]
	fi
fi

zfs create -p -o mountpoint=none -o canmount=off $POOL_NAME/jail
mkdir -p "$jail_dir"


curr_host_ver=`zfs get -H -o value org.nuos:active_revision $POOL_NAME/os/$JAIL_OS || true`
[ "x$curr_host_ver" != x- ]

zfs list -H -r -t filesystem -o name,mountpoint $POOL_NAME/os/$JAIL_OS/$curr_host_ver | while read -r ds mp; do
	if canhas "${CHROOTDIR-}"; then
		mp=${mp#${CHROOTDIR-}}
	fi
	if [ $POOL_NAME/os/$JAIL_OS/$curr_host_ver$mp = $ds ]; then
		jmp=
	else
		if [ / = "$mp" ]; then
			jmp=$JAIL_PATH
		else
			jmp=$JAIL_PATH$mp
		fi
	fi
	pat=$POOL_NAME/os/$JAIL_OS/$curr_host_ver/
	if [ "$POOL_NAME/os/$JAIL_OS/$curr_host_ver" = "$ds" ]; then
		ds=
		jmp=$JAIL_PATH
	fi
	zfs clone ${jmp:+-o mountpoint=$jmp} $POOL_NAME/os/$JAIL_OS/$curr_host_ver${ds:+/${ds#$pat}}@$JAIL_SNAP $JAIL_DATA${ds:+/${ds#$pat}}
	if canhas "${CHROOTDIR-}" && mkdir "$CHROOTDIR${jmp:-$JAIL_PATH$mp}" 2> /dev/null; then
		eval `stat -f "mode=%OMp%03OLp uid=%Du gid=%Dg flags=%Of" "${jmp:-$JAIL_PATH$mp}"`
		zfs unmount $JAIL_DATA${ds:+/${ds#$pat}}
		chown $uid:$gid "${CHROOTDIR-}$jmp"
		chmod $mode "${CHROOTDIR-}$jmp"
		chflags $flags "${CHROOTDIR-}$jmp"
		mount -t zfs $JAIL_DATA${ds:+/${ds#$pat}} "${CHROOTDIR-}${jmp:-$JAIL_PATH$mp}"
		remounted=y
	fi
done
if srsly "${remounted-}"; then
	find "$JAIL_PATH" | tail -r | xargs rmdir
fi


cat >> "${CHROOTDIR-}/$JAIL_PATH/etc/rc.conf.local" <<EOF
hostname="$JAIL_HOST"
EOF

sed -i '' -e "s/\.my\.domain\$/.`echo $JAIL_HOST | sed -e 's/^[^\.]*\.//'` $JAIL_HOST `echo $JAIL_HOST | sed -e 's/\..*//'`/" "${CHROOTDIR-}$JAIL_PATH/etc/hosts"

add_our_jail_to_hostfile "${CHROOTDIR-}/etc/hosts"
for j in `ls "$jail_dir"`; do
	if [ $j != $JAIL_NAME ]; then
		${CHROOTDIR:+chroot "$CHROOTDIR"} getent hosts $j.jail >> "$jail_dir/$JAIL_NAME/etc/hosts"
	fi
	add_our_jail_to_hostfile "$jail_dir/$j/etc/hosts"
done

cat >> "${CHROOTDIR-}/etc/jail.conf" <<EOF
$JAIL_NAME_ {
EOF

if [ "$JAIL_NAME" != "$JAIL_NAME_" ]; then
	cat >> "${CHROOTDIR-}/etc/jail.conf" <<EOF
	path = "/var/jail/$JAIL_NAME";
	host.hostname = "$JAIL_NAME.jail";
EOF
fi

if [ -n "${OPT_MOUNT_FSTAB-}" ]; then
	touch "${CHROOTDIR-}/etc/fstab.$JAIL_NAME_"
	cat >> "${CHROOTDIR-}/etc/jail.conf" <<EOF
	mount.fstab = "/etc/fstab.$JAIL_NAME_";
EOF
fi

case $JAIL_TYPE in
	public)
		cat >> "${CHROOTDIR-}/etc/jail.conf" <<EOF
	interface = "$PUBLIC_INTERFACE";
EOF
		;;
	clone)
		cat >> "${CHROOTDIR-}/etc/jail.conf" <<'EOF'
	allow.raw_sockets;
	noip_hostname;
	ip4 = "inherit";   
	$tmpfs_args = "";
EOF
		require_tmp tempfile
		grep ^exec.prestart "${CHROOTDIR-}/etc/jail.conf" | sed -e 's/&& devfs .* applyset &&/\&\&/;s/^/	/' >> "$tempfile"
		cat "$tempfile" >> "${CHROOTDIR-}/etc/jail.conf"
		rm "$tempfile"
		;;
	vnet)
		rip=${JAIL_IP%.*}.$((${JAIL_IP##*.} - 1))
		next_epair=$((`{ echo -1; sed -nEe '/^[[:blank:]]*exec.prestart[[:>:]]/{/"ifconfig epair[[:digit:]]+ create"/{s/^.*(epair[[:digit:]]+)/\1/;s/epair([[:digit:]]+).*$/\1/;p;};}' "${CHROOTDIR-}/etc/jail.conf"; } | sort -n | tail -n 1` + 1))
		cat >> "${CHROOTDIR-}/etc/jail.conf" <<EOF
	noip_hostname;
	vnet = "new";
	vnet.interface = "epair${next_epair}b";
	exec.prestart += "ifconfig epair${next_epair} create";
	exec.prestart += "ifconfig epair${next_epair}a $rip netmask 0xfffffffe";
	exec.start = "ifconfig lo0 127.0.0.1 netmask 0xff000000";
	exec.start += "ifconfig epair${next_epair}b $JAIL_IP netmask 0xfffffffe";
	exec.start += "route add default $rip";
	exec.start += "/bin/sh /etc/rc";
	exec.poststop += "ifconfig epair${next_epair}a destroy";
EOF
		;;
esac

if srsly "${OPT_RW_SRC-}"; then
		cat >> "${CHROOTDIR-}/etc/jail.conf" <<EOF
	exec.prestart += "mkdir -p \$path/usr/ports && mount -t nullfs /usr/ports \$path/usr/ports";
	exec.prestart += "mount -t nullfs /usr/ports/distfiles \$path/usr/ports/distfiles";
	exec.prestart += "mount -t nullfs /usr/ports/packages \$path/usr/ports/packages";
	exec.prestart += "mount -t nullfs /var/db/portsnap \$path/var/db/portsnap";
	exec.prestart += "mount -t nullfs /usr/src \$path/usr/src";
	exec.prestart += "mount -t nullfs /usr/obj \$path/usr/obj";
	exec.poststop += "umount \$path/usr/ports/distfiles";
	exec.poststop += "umount \$path/usr/ports/packages";
	exec.poststop += "umount \$path/usr/ports";
	exec.poststop += "umount \$path/var/db/portsnap";
	exec.poststop += "umount \$path/usr/src";
	exec.poststop += "umount \$path/usr/obj";
EOF
fi

if canhas "${LISTEN_SERVICE-}"; then
	if [ "${LISTEN_SERVICE-}" != '*' ]; then
		listen_list=`echo $LISTEN_SERVICE | sed -e 's/ /, /g'`
	fi
	if srsly "${OPT_PUBLIC_LISTEN_SERVICE-}"; then
		if srsly "${OPT_PUBLIC_ALIAS-}"; then
			: ${ALIAS_IP:=$JAIL_IP}
			me=$ALIAS_IP
		else
			me=me
		fi
		nat_conf=`for port in $LISTEN_SERVICE; do for proto in tcp udp; do echo redirect_port $proto $JAIL_NAME.jail:$port ${OPT_PUBLIC_ALIAS:+$ALIAS_IP:}$port; done; done | xargs`
	fi
	cat >> "${CHROOTDIR-}/etc/jail.conf" <<EOF
${OPT_PUBLIC_LISTEN_SERVICE:+${OPT_PUBLIC_ALIAS:+	exec.poststart += "ipfw add $fwd_rule_n fwd $JAIL_NAME.jail ip from me to $ALIAS_IP${listen_list:+ $listen_list} keep-state";
}	exec.poststart += "\`ipfw nat show config\` $nat_conf";
}${CONNECT_TARGETS:+	exec.poststart += "ipfw add $ct_rule_n nat 123 ip4 from $CONNECT_TARGETS to $JAIL_NAME.jail";
}exec.poststart += "ipfw add $fw_rule_n allow ip from any to $JAIL_NAME.jail${listen_list:+ $listen_list} via \$interface";
	exec.poststart += "ipfw add $fw_rule_n allow ip from $JAIL_NAME.jail${listen_list:+ $listen_list} to any via \$interface";
EOF
fi
if canhas "${CONNECT_SERVICE-}"; then
	if [ "${CONNECT_SERVICE-}" != '*' ]; then
		connect_list=`echo $CONNECT_SERVICE | sed -e 's/ /, /g'`
	fi
	cat >> "${CHROOTDIR-}/etc/jail.conf" <<EOF
	exec.poststart += "ipfw add $fw_rule_n allow ip from any${connect_list:+ $connect_list} to $JAIL_NAME.jail";
	exec.poststart += "ipfw add $fw_rule_n allow ip from $JAIL_NAME.jail to any${connect_list:+ $connect_list}";
EOF
fi
if canhas "${LISTEN_SERVICE-}${CONNECT_SERVICE-}"; then
	cat >> "${CHROOTDIR-}/etc/jail.conf" <<EOF
${OPT_PUBLIC_LISTEN_SERVICE:+	exec.prestop += "\`ipfw nat show config | sed -E -e \"s/ redirect_port [[:graph:]]+ \$(getent hosts $JAIL_NAME.jail | cut -w -f 1):[[:digit:]]+ ${OPT_PUBLIC_ALIAS:+[[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+:}[[:digit:]]+//g\"\`";
${OPT_PUBLIC_ALIAS:+	exec.prestop += "ipfw delete $fwd_rule_n";
}}${CONNECT_TARGETS:+	exec.prestop += "ipfw delete $ct_rule_n";
}	exec.prestop += "ipfw delete $fw_rule_n";
EOF
fi

cat >> "${CHROOTDIR-}/etc/jail.conf" <<EOF
}
EOF

if [ $JAIL_TYPE = clone ]; then
	cat >> "${CHROOTDIR-}$JAIL_PATH/etc/rc.conf.local" <<EOF
syslogd_flags="-ss"
EOF
fi

admin_install "${CHROOTDIR-}$JAIL_PATH"

if [ -f "${CHROOTDIR-}/etc/resolv.conf" ]; then
	cp -a -v "${CHROOTDIR-}/etc/resolv.conf" "${CHROOTDIR-}$JAIL_PATH/etc/"
fi

echo "Initialization of $JAIL_HOST running $JAIL_OS is complete."
