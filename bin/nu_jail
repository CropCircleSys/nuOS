#!/bin/sh
set -e; set -u; set -C

# nuOS 0.0.11.2a1 - bin/nu_jail
#
# Copyright (c) 2008-2018 Chad Jacob Milios and Crop Circle Systems.
# All rights reserved.
#
# This Source Code Form is subject to the terms of the Simplified BSD License.
# If a copy of the Simplified BSD License was not distributed alongside this file, you can
# obtain one at https://www.freebsd.org/copyright/freebsd-license.html . This software
# project is not affiliated with the FreeBSD Project.
#
# Official updates and community support available at https://nuos.org .
# Professional services available at https://ccsys.com .

NUOS_VER=0.0.11.2a1

. "$(dirname "$(realpath "$0")")/../lib/nu_system.sh"

while getopts a:b:C:dfh:i:I:j:o:O:p:qs:S:t:u:vwx OPT; do case $OPT in
	a) ADMIN_ACCT=$OPTARG;;
	b) BD_ACCT=$OPTARG;;
	C) CHROOTDIR=$OPTARG;;
	d) OPT_DELETE=y;;
	f) OPT_FORCE_DELETE=y;;
	h) JAIL_HOST=$OPTARG;;
	i) JAIL_IP=$OPTARG;;
	I) push LISTEN_SERVICE $OPTARG;;
	j) JAIL_NAME=$OPTARG;;
	o) JAIL_OS=$OPTARG;;
	O) push CONNECT_SERVICE $OPTARG;;
	p) POOL_NAME=$OPTARG;;
	q) OPT_QUICK=y;;
	s) JAIL_SNAP=$OPTARG;;
	S) push SERVICE $OPTARG;;
	t) JAIL_TYPE=$OPTARG;; # jail (default), clone or vnet
	u) USER_ACCT=$OPTARG;;
	v) OPT_VERBOSE=y;;
	w) OPT_RW_SRC=y;;
	x) ADMIN_ACCT=; BD_ACCT=; USER_ACCT=;;
esac; done; shift $(($OPTIND-1))
[ $# = 0 ]

. "$(dirname "$(realpath "$0")")/../lib/nu_common.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_admin.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_jail.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_collection.sh"

baseos_init
nuos_init
: ${POOL_NAME:=$POOL_BOOT_NAME}

collection_vars_init
jail_vars_init
admin_init

maybe_pause
maybe_yell

if srsly "${OPT_DELETE-}"; then
	if ! srsly "${OPT_FORCE_DELETE-}"; then
		read -p "Are you sure you want to delete the jail '$JAIL_NAME' from configuration and all associated data from '$JAIL_DATA'? Type 'absolutely' to confirm: " confirm
		if [ "$confirm" != absolutely ]; then
			echo Action canceled.
			exit 1
		fi 
	fi
	jail -r $JAIL_NAME || true
	sed -i '' -e "/^$JAIL_NAME {\$/,/^}\$/d" "${CHROOTDIR-}/etc/jail.conf"
	sed -i '' -E -e "/^[^#]*[[:<:]]$JAIL_NAME\\.jail[[:>:]]/d" "${CHROOTDIR-}/etc/hosts"
	zfs list -H -r $JAIL_DATA | cut -w -f 1 | tail -r | xargs -n1 zfs destroy
	rmdir "${CHROOTDIR-}$JAIL_PATH"
	exit
fi

if canhas "${SERVICE-}"; then
	push LISTEN_SERVICE $SERVICE
	push CONNECT_SERVICE $SERVICE
fi
if canhas "${LISTEN_SERVICE-}" || canhas "${CONNECT_SERVICE-}"; then
	[ $JAIL_TYPE = jail ]
	inbound_fw_rule_n=$((`{ echo 200; sed -nEe '/^[[:blank:]]*exec.prestart[[:>:]]/{/"ipfw add 1[[:digit:]][[:digit:]] /{s/^.*(ipfw add 1[[:digit:]][[:digit:]])/\1/;s/ipfw add (1[[:digit:]][[:digit:]]).*$/\1/;p;};}' "${CHROOTDIR-}/etc/jail.conf"; } | sort -n | head -n 1` - 1))
	[ $inbound_fw_rule_n -le 199 -a $inbound_fw_rule_n -ge 102 ]
	outbound_fw_rule_n=$((`{ echo 300; sed -nEe '/^[[:blank:]]*exec.prestart[[:>:]]/{/"ipfw add 2[[:digit:]][[:digit:]] /{s/^.*(ipfw add 2[[:digit:]][[:digit:]])/\1/;s/ipfw add (2[[:digit:]][[:digit:]]).*$/\1/;p;};}' "${CHROOTDIR-}/etc/jail.conf"; } | sort -n | head -n 1` - 1))
	[ $outbound_fw_rule_n -le 299 -a $outbound_fw_rule_n -ge 202 ]
fi

zfs create -p -o mountpoint=none -o canmount=off $POOL_NAME/jail
mkdir -p `dirname "${CHROOTDIR-}$JAIL_PATH"`


curr_host_ver=`zfs get -H -o value org.nuos:active_revision $POOL_NAME/os/$JAIL_OS || true`
[ "x$curr_host_ver" != x- ]

zfs list -H -r -t filesystem -o name,mountpoint $POOL_NAME/os/$JAIL_OS/$curr_host_ver | while read -r ds mp; do
	if canhas "${CHROOTDIR-}"; then
		mp=${mp#${CHROOTDIR-}}
	fi
	if [ $POOL_NAME/os/$JAIL_OS/$curr_host_ver$mp = $ds ]; then
		jmp=
	else
		if [ / = "$mp" ]; then
			jmp=$JAIL_PATH
		else
			jmp=$JAIL_PATH$mp
		fi
	fi
	pat=$POOL_NAME/os/$JAIL_OS/$curr_host_ver/
	if [ "$POOL_NAME/os/$JAIL_OS/$curr_host_ver" = "$ds" ]; then
		ds=
		jmp=$JAIL_PATH
	fi
	zfs clone ${jmp:+-o mountpoint=$jmp} $POOL_NAME/os/$JAIL_OS/$curr_host_ver${ds:+/${ds#$pat}}@$JAIL_SNAP $JAIL_DATA${ds:+/${ds#$pat}}
done


cat >> "${CHROOTDIR-}/$JAIL_PATH/etc/rc.conf.local" <<EOF
hostname="$JAIL_HOST"
EOF

sed -i '' -e "s/\.my\.domain\$/.`echo $JAIL_HOST | sed -e 's/^[^\.]*\.//'` $JAIL_HOST `echo $JAIL_HOST | sed -e 's/\..*//'`/" "${CHROOTDIR-}$JAIL_PATH/etc/hosts"

cat >> "${CHROOTDIR-}/etc/hosts" <<EOF
$JAIL_IP		$JAIL_HOST $JAIL_NAME.jail $JAIL_NAME
EOF

cat >> "${CHROOTDIR-}/etc/jail.conf" <<EOF
$JAIL_NAME {
EOF

case $JAIL_TYPE in
	clone)
		cat >> "${CHROOTDIR-}/etc/jail.conf" <<'EOF'
	allow.raw_sockets;
	noip_hostname;
	ip4 = "inherit";   
	$tmpfs_args = "";
EOF
		require_tmp tempfile
		grep ^exec.prestart "${CHROOTDIR-}/etc/jail.conf" | sed -e 's/&& devfs .* applyset &&/\&\&/;s/^/	/' >> "$tempfile"
		cat "$tempfile" >> "${CHROOTDIR-}/etc/jail.conf"
		rm "$tempfile"
		;;
	vnet)
		rip=${JAIL_IP%.*}.$((${JAIL_IP##*.} - 1))
		next_epair=$((`{ echo -1; sed -nEe '/^[[:blank:]]*exec.prestart[[:>:]]/{/"ifconfig epair[[:digit:]]+ create"/{s/^.*(epair[[:digit:]]+)/\1/;s/epair([[:digit:]]+).*$/\1/;p;};}' "${CHROOTDIR-}/etc/jail.conf"; } | sort -n | tail -n 1` + 1))
		cat >> "${CHROOTDIR-}/etc/jail.conf" <<EOF
	noip_hostname;
	vnet = "new";
	vnet.interface = "epair${next_epair}b";
	exec.prestart += "ifconfig epair${next_epair} create";
	exec.prestart += "ifconfig epair${next_epair}a $rip netmask 0xfffffffe";
	exec.start = "ifconfig lo0 127.0.0.1 netmask 0xff000000";
	exec.start += "ifconfig epair${next_epair}b $JAIL_IP netmask 0xfffffffe";
	exec.start += "route add default $rip";
	exec.start += "/bin/sh /etc/rc";
	exec.poststop += "ifconfig epair${next_epair}a destroy";
EOF
		;;
esac

if srsly "${OPT_RW_SRC-}"; then
		cat >> "${CHROOTDIR-}/etc/jail.conf" <<EOF
	exec.prestart += "mkdir -p \$path/usr/ports && mount -t nullfs /usr/ports \$path/usr/ports";
	exec.prestart += "mount -t nullfs /usr/ports/distfiles \$path/usr/ports/distfiles";
	exec.prestart += "mount -t nullfs /usr/ports/packages \$path/usr/ports/packages";
	exec.prestart += "mount -t nullfs /var/db/portsnap \$path/var/db/portsnap";
	exec.prestart += "mount -t nullfs /usr/src \$path/usr/src";
	exec.prestart += "mount -t nullfs /usr/obj \$path/usr/obj";
	exec.poststop += "umount \$path/usr/ports/distfiles";
	exec.poststop += "umount \$path/usr/ports/packages";
	exec.poststop += "umount \$path/usr/ports";
	exec.poststop += "umount \$path/var/db/portsnap";
	exec.poststop += "umount \$path/usr/src";
	exec.poststop += "umount \$path/usr/obj";
EOF
fi

if canhas "${LISTEN_SERVICE-}"; then
	if [ "${LISTEN_SERVICE-}" = '*' ]; then
		tgt=$JAIL_NAME.jail
	else
		tgt="$JAIL_NAME.jail `echo $LISTEN_SERVICE | tr '[:blank:]' ,`"
	fi
	cat >> "${CHROOTDIR-}/etc/jail.conf" <<EOF
	exec.prestart += "ipfw add $inbound_fw_rule_n allow ip from any to $tgt via \$interface";
	exec.poststop += "ipfw delete $inbound_fw_rule_n";
	exec.prestart += "ipfw add $outbound_fw_rule_n allow ip from $tgt to any via \$interface";
	exec.poststop += "ipfw delete $outbound_fw_rule_n";
EOF
	inbound_fw_rule_n=$(($inbound_fw_rule_n - 1))
	outbound_fw_rule_n=$(($outbound_fw_rule_n - 1))
fi
if canhas "${CONNECT_SERVICE-}"; then
	if [ "${CONNECT_SERVICE-}" = '*' ]; then
		tgt=any
	else
		tgt="any `echo $CONNECT_SERVICE | tr '[:blank:]' ,`"
	fi
	cat >> "${CHROOTDIR-}/etc/jail.conf" <<EOF
	exec.prestart += "ipfw add $inbound_fw_rule_n allow ip from $tgt to $JAIL_NAME.jail";
	exec.poststop += "ipfw delete $inbound_fw_rule_n";
	exec.prestart += "ipfw add $outbound_fw_rule_n allow ip from $JAIL_NAME.jail to $tgt";
	exec.poststop += "ipfw delete $outbound_fw_rule_n";
EOF
fi

cat >> "${CHROOTDIR-}/etc/jail.conf" <<EOF
}
EOF

if [ $JAIL_TYPE = clone ]; then
	cat >> "${CHROOTDIR-}$JAIL_PATH/etc/rc.conf.local" <<EOF
syslogd_flags="-ss"
EOF
fi

admin_install "${CHROOTDIR-}$JAIL_PATH"

echo "Initialization of $JAIL_HOST running $JAIL_OS is complete."
