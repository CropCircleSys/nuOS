#!/bin/sh
set -e; set -u; set -C

# nuOS 0.0.11.4a0 - bin/nu_ns_server
#
# Copyright (c) 2008-2020 Chad Jacob Milios and Crop Circle Systems.
# All rights reserved.
#
# This Source Code Form is subject to the terms of the Simplified BSD License.
# If a copy of the Simplified BSD License was not distributed alongside this file, you can
# obtain one at https://www.freebsd.org/copyright/freebsd-license.html . This software
# project is not affiliated with the FreeBSD Project.
#
# Official updates and community support available at https://nuos.org .
# Professional services available at https://ccsys.com .

NUOS_VER=0.0.11.4a0

. "$(dirname "$(realpath "$0")")/../lib/nu_system.sh"

while getopts a:A:b:C:dh:i:k:m:s:t:vz: OPT; do case $OPT in
	a) ALGORITHM=$OPTARG;;
	A) ALTERNATE=$OPTARG;;
	b) SIG_BITS=$OPTARG;;
	C) CHROOTDIR=$OPTARG;;
	d) OPT_DNSSEC=y;;
	h) HOST_NAME=$OPTARG;;
	i) push PUB_IPS $OPTARG;;
	k) KSK_BITS=$OPTARG;;
	m) push MASTERS $OPTARG;;
	M) MODE=$OPTARG; case $MODE in
		master|slave) ;; *) exit 22; esac;;
	s) push SLAVES $OPTARG;;
	t) SOFTWARE=$OPTARG; case $SOFTWARE in
		djb|knot) ;; *) exit 22; esac;;
	v) OPT_VERBOSE=y;;
	z) ZSK_BITS=$OPTARG;;
esac; done; shift $(($OPTIND-1))
[ $# = 0 ]

. "$(dirname "$(realpath "$0")")/../lib/nu_common.sh"

nuos_init

: ${SOFTWARE:=knot}
echo 'software        -t SOFTWARE       ' $SOFTWARE
echo 'public ips      -i PUB_IPS        ' $PUB_IPS

case $SOFTWARE in
	
	djb)
		echo 'host name       -h HOST_NAME      ' ${HOST_NAME:=$HOST}
	;;
	
	knot)
		[ -z "${MASTERS-}" -o -z "${SLAVES-}" ] # we dont support configuring complex propagation hierarchies yet
		if [ -n "${MASTERS-}" ]; then
			: ${MODE:=slave}
		else
			: ${MODE:=master}
		fi
		[ -z "${MASTERS-}" -o $MODE = slave ] # so then, if we have no masters then we must be a master
		[ -z "${SLAVES-}" -o $MODE = master ] # and vice versa
		[ -z "${OPT_DNSSEC-}" -o $MODE = master ] # only the master signs
		echo 'mode            -M MODE           ' $MODE
		echo 'master ips      -m MASTERS        ' ${MASTERS-<none>}
		echo 'slave ips       -s SLAVES         ' ${SLAVES-<none>}
		echo -n 'dnssec          -d OPT_DNSSEC      ' && [ -n "${OPT_DNSSEC-}" ] && echo set || echo null
		if [ -n "${OPT_DNSSEC-}" ]; then
			echo 'algorithm       -a ALGORITHM      ' ${ALGORITHM:=rsa}
			echo 'hash size       -b SIG_BITS       ' ${SIG_BITS:=256}
			case $ALGORITHM in
				rsa) algo=rsasha$SIG_BITS;;
				ecdsa) algo=ecdsap$SIG_BITSsha$SIG_BITS;;
			esac
			[ -n "$algo" ]
			echo 'keykey size     -k KSK_BITS       ' ${KSK_BITS:=2048}
			echo 'zonekey size    -z ZSK_BITS       ' ${ZSK_BITS:=1024}
		fi
	;;
	
esac

echo

maybe_yell

case $SOFTWARE in
	
	djb)
		
		mkdir -p "${CHROOTDIR-}/var/service"
		
		for ip in $PUB_IPS; do
			[ ! -e "${CHROOTDIR-}/var/service/tinydns-$ip" ]
			${CHROOTDIR:+chroot "$CHROOTDIR"} tinydns-conf tinydns dnslog /var/service/tinydns-$ip $ip
			(
				cd "${CHROOTDIR-}/var/service/tinydns-$ip/root"
				rdns=`rev_zone $ip`
				for ip_ in $PUB_IPS; do
					./add-ns $HOST_NAME $ip_
					./add-ns $rdns $ip_
				done
				./add-mx $HOST_NAME $ip
				./add-host $HOST_NAME $ip
				./add-alias www.$HOST_NAME $ip
				make
			)
		done
		
		sister enable_svc ${CHROOTDIR:+-C "$CHROOTDIR"} svscan
	;;
	
	knot)
		
		ETC="${CHROOTDIR-}/usr/local/etc/knot"
		sufx=${ALTERNATE:+_${ALTERNATE}}
		if [ ! -f "$ETC/example.com.zone.sample" ]; then
			mv -n -h "$ETC/example.com.zone" "$ETC/example.com.zone.sample"
		fi
		[ ! -e "$ETC/knot$sufx.conf" -a -f "$ETC/knot.conf.sample" ] || diff -q "$ETC/knot.conf.sample" "$ETC/knot$sufx.conf"
		
		case $MODE in
			master)
				other_mode=slave
				action=transfer
			;;
			slave)
				other_mode=master
				action=notify
			;;
		esac
		
		sed -nEe '
			/^server:/,/^$/{
				s/^([[:blank:]]*)# user:.*$/\1user: knot:knot/
				p
			}
			/^log:/,/^$/p' "$ETC/knot.conf.sample" >| "$ETC/knot$sufx.conf"
		
		if [ -n "${MASTERS-}${SLAVES-}" ]; then
			for h in ${MASTERS-}${SLAVES-}; do
				if echo $h | grep -q -E '[^[:digit:]\.]'; then
					h=`${CHROOTDIR:+chroot "$CHROOTDIR"} getent hosts $h | cut -w -f 1`
					canhas $h
				fi
				push partner_ips $h
				incr num_partners 1
				push partner_ids $other_mode$num_partners
			done
			if [ $num_partners -gt 1 ]; then
				partner_ip_list=`echo $partner_ips | sed -e 's/ /, /g;s/^/[ /;s/$/ ]/;'`
				partner_id_list=`echo $partner_ids | sed -e 's/ /, /g;s/^/[ /;s/$/ ]/;'`
			else
				partner_ip_list="$partner_ips"
				partner_id_list="$partner_ids"
			fi
			echo remote: >> "$ETC/knot$sufx.conf"
			for ip in $partner_ips; do
				i=$((${i-0} + 1))
				cat >> "$ETC/knot$sufx.conf" <<EOF
  - id: $other_mode${SLAVES:+$i}
    address: $ip
EOF
			done
cat >> "$ETC/knot$sufx.conf" <<EOF

acl:
  - id: acl_$other_mode
    address: $partner_ip_list
    action: $action

EOF
		fi
		
		if [ -n "${OPT_DNSSEC-}" ]; then
			cat >> "$ETC/knot$sufx.conf" <<EOF
policy:
  - id: $ALGORITHM
    algorithm: $algo
    ksk-size: $KSK_BITS
    zsk-size: $ZSK_BITS
    nsec3: on

EOF
		fi
		
		cat >> "$ETC/knot$sufx.conf" <<EOF
template:
  - id: default
    zonefile-load: difference
    semantic-checks: on
${MASTERS+    master: master
    acl: acl_master
}${SLAVES+    notify: $partner_id_list
    acl: acl_slave
}${OPT_DNSSEC+    dnssec-signing: on
    dnssec-policy: $ALGORITHM
}
zone:
EOF
		
		sed -nEe '
				/^\$/,/^$/p
				/^@/,/^$/{
					s/\<dns1\>/ns1/
					p
				}
			' \
			"$ETC/example.com.zone.sample" \
				>| "$ETC/example$sufx.com.zone"
		
		i=1
		for ip in $PUB_IPS; do
			cat >> "$ETC/example$sufx.com.zone" <<EOF
	NS	ns$i
EOF
			i=$(($i + 1))
		done
		
		sed -Ee '
				s/\<example\.com\>/example.in-addr.arpa/g
			' \
			"$ETC/example$sufx.com.zone" \
				>| "$ETC/example$sufx.in-addr.arpa.zone"
		
		i=1
		for ip in $PUB_IPS; do
			case $i in
				1) order=0;;
				*) order=10;;
			esac
			cat >> "$ETC/example$sufx.com.zone" <<EOF
	MX	$order mx$i
EOF
			i=$(($i + 1))
		done
		
		tee -a "$ETC/example$sufx.com.zone" >> "$ETC/example$sufx.in-addr.arpa.zone" <<EOF

	1m	CAA	128 issue ";"
	1m	CAA	128 issuewild ";"

EOF
		cat >> "$ETC/example$sufx.com.zone" <<EOF
	TXT	"v=spf1 mx -all"
EOF

		cat >> "$ETC/example$sufx.in-addr.arpa.zone" <<EOF
	TXT	"v=spf1 -all"
EOF
		
		tee -a "$ETC/example$sufx.com.zone" >> "$ETC/example$sufx.in-addr.arpa.zone" <<EOF

*	TXT	"v=spf1 -all"

EOF
		
		cat >> "$ETC/example$sufx.com.zone" <<EOF
_acme-challenge	1m	TXT	";"

EOF
		
		i=1
		for ip in $PUB_IPS; do
			tee -a "$ETC/example$sufx.com.zone" >> "$ETC/example$sufx.in-addr.arpa.zone" <<EOF
ns$i	A	$ip

EOF
			i=$(($i + 1))
		done
		
		i=1
		for ip in $PUB_IPS; do
			cat >> "$ETC/example$sufx.com.zone" <<EOF
mx$i	A	$ip

EOF
			i=$(($i + 1))
		done
		
		i=1
		for ip in $PUB_IPS; do
			cat >> "$ETC/example$sufx.com.zone" <<EOF
slave$i	A	$ip

EOF
			i=$(($i + 1))
		done
		
		i=1
		for ip in $PUB_IPS; do
			cat >> "$ETC/example$sufx.com.zone" <<EOF
`[ $i -gt 1 ] || echo @`	A	$ip
EOF
			i=$(($i + 1))
		done
		
		echo >> "$ETC/example$sufx.com.zone"
		
		i=1
		for ip in $PUB_IPS; do
			cat >> "$ETC/example$sufx.com.zone" <<EOF
`[ $i -gt 1 ] || echo www`	A	$ip
EOF
			i=$(($i + 1))
		done
		
		cat >> "$ETC/example$sufx.in-addr.arpa.zone" <<EOF
@	PTR	example.com.
EOF
		
		if [ $MODE = slave ]; then
			for ip in $PUB_IPS; do
				echo "  - domain: `rev_zone $ip`" >> "$ETC/knot$sufx.conf"
			done
		fi
		
		sister enable_svc ${CHROOTDIR:+-C "$CHROOTDIR"} knot
		
	;;
	
esac


echo "Configured name servers."
