#!/bin/sh
set -e; set -u; set -C

# nuOS 0.0.11.4a0 - bin/nu_exodus
#
# Copyright (c) 2008-2020 Chad Jacob Milios and Crop Circle Systems.
# All rights reserved.
#
# This Source Code Form is subject to the terms of the Simplified BSD License.
# If a copy of the Simplified BSD License was not distributed alongside this file, you can
# obtain one at https://www.freebsd.org/copyright/freebsd-license.html . This software
# project is not affiliated with the FreeBSD Project.
#
# Official updates and community support available at https://nuos.org .
# Professional services available at https://ccsys.com .

NUOS_VER=0.0.11.4a0

. "$(dirname "$(realpath "$0")")/../lib/nu_system.sh"

while getopts o:v OPT; do case $OPT in
	v) OPT_VERBOSE=y;;
	o) OUTPUT=$OPTARG;;
esac; done; shift $(($OPTIND-1))

: ${OUTPUT:="$HOME/nuos_site_exodus"}
mkdir "$OUTPUT"

maybe_yell

roles="$@"
: ${roles:="ca ns lb vpn pm po www"}

canhas "$roles"

for role in $roles; do
	case $role in
		ca) # certificate authority
			if [ -d /etc/ssl/private \
					-a "private/ca.*.key" != "`cd /etc/ssl && echo private/ca.*.key`" ]
			then
				mkdir -p "$OUTPUT/ca/ssl"
				(cd /etc/ssl \
					&& tar -cf - \
						serials private/ca.*.key certs/ca.*.internal.crt
				) | tar -xvf - -C "$OUTPUT/ca/ssl"
			else push err $role; fi
		;;
		ns) # authoritative name server
			if [ -d /var/jail/ns/var/db/knot/keys/keys ]; then
				mkdir -p "$OUTPUT/ns/knotdb"
				tar -cf - -C /var/jail/ns/var/db/knot keys \
					| tar -xvf - -C "$OUTPUT/ns/knotdb"
			else push err $role; fi
		;;
		lb) # http load balancer
			if [ -d /etc/ssl/private ]; then
				mkdir -p "$OUTPUT/lb/ssl"
				(cd /etc/ssl \
					&& tar -cf - \
						--exclude 'private/ca.*.key' \
						--exclude 'certs/*.internal.crt' \
						`find certs -depth 1 -name '*.*.*.internal.crt' \
							| sed -E -e '
								s/^.{6}(.*).{13}$/\1/
								/^ca\./d
								s|^(.*)$|\
							--exclude private/\1.key \
							--exclude csrs/\1.csr|'
						` \
						private csrs certs private.next csrs.next
				) | tar -xvf - -C "$OUTPUT/lb/ssl"
			else push err $role; fi
		;;
		vpn) # virtual private network server
			if [ -d /etc/ssl/private -a "certs/*.internal.crt" != "`cd /etc/ssl && echo certs/*.internal.crt`" ]; then
				mkdir -p "$OUTPUT/vpn/ssl"
				(cd /etc/ssl \
					&& tar -cf - \
						--exclude 'private/ca.*.key' \
						--exclude 'certs/ca.*.internal.crt' \
						certs/*.internal.crt \
						`find certs -depth 1 -name '*.internal.crt' \
							| sed -E -e '
								s/^.{6}(.*).{13}$/\1/
								/^ca\./d
								s|^(.*)$|\
							private/\1.key \
							csrs/\1.csr|'
						` \
				) | tar -xvf - -C "$OUTPUT/vpn/ssl"
			else push err $role; fi
		;;
		pm) # post master (smtp) server
			if [ -f /var/jail/postmaster/usr/local/etc/postfix/virtual ]; then
				mkdir -p "$OUTPUT/pm"
				tar -cf - -C /var/jail/postmaster/usr/local/etc/postfix \
					aliases domains senders transport virtual | tar -xvf - -C "$OUTPUT/pm"
			else push err $role; fi
		;;
		po) # post office (imap) server
			if [ -d /var/jail/postoffice/var/imap/user ]; then
				mkdir -p "$OUTPUT/po"
				tar -cf - -C /var/jail/postoffice/var imap spool/imap | tar -xvf - -C "$OUTPUT/po"
			else push err $role; fi
		;;
		www) # web server
			for site in /var/jail/www/home/*/*.*/www /var/jail/www/root/*.*/www; do
				hostdir=`dirname "$site"`
				host=`basename "$hostdir"`
				home=`dirname "$hostdir"`
				[ -d "$hostdir" ] || continue
				mkdir -p "$OUTPUT/www/$host"
				awk "\$2 ~ \"^$site(\$|/)\"" /etc/fstab.www >> "$OUTPUT/www/$host.fstab"
				if ! [ -s "$OUTPUT/www/$host.fstab" ]; then
					rm "$OUTPUT/www/$host.fstab"
					tar -cf - -C "$site" .
				elif [ -z "$(awk "\$2 == \"$site\"" "$OUTPUT/www/$host.fstab")" ]; then
					(set -f; cd "$site" \
						&& tar -cf - \
							`awk "
								(substr(\\\$2, 0, ${#site}+1) == \"$site/\") {
									print substr(\\\$2, ${#site}+2)
								}
							" "$OUTPUT/www/$host.fstab" \
								| sed -E -e '
									s|^(.*)$|\
								--exclude ./\1/?*|'
							` \
							.
					)
				fi | tar -xvf - -C "$OUTPUT/www/$host"
				cp -v /var/jail/www/usr/local/etc/apache24/Includes/VirtualHost.custom/$host.conf "$OUTPUT/www/" || true
			done
			[ -d "$OUTPUT/www" ] || push err $role
		;;
		*) push err $role
	esac
done

echo
if canhas "${err-}"; then
	echo "ERROR: Exodus of roles '$err' failed." >&2
	exit 78
else
	echo "Exodus of roles '$roles' to $OUTPUT succeeded."
fi
