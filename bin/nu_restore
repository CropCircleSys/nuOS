#!/bin/sh
set -e; set -u; set -C

# nuOS 0.0.11.4a0 - bin/nu_restore
#
# Copyright (c) 2008-2020 Chad Jacob Milios and Crop Circle Systems.
# All rights reserved.
#
# This Source Code Form is subject to the terms of the Simplified BSD License.
# If a copy of the Simplified BSD License was not distributed alongside this file, you can
# obtain one at https://www.freebsd.org/copyright/freebsd-license.html . This software
# project is not affiliated with the FreeBSD Project.
#
# Official updates and community support available at https://nuos.org .
# Professional services available at https://ccsys.com .

NUOS_VER=0.0.11.4a0

while getopts nst:v OPT; do case $OPT in
	n) OPT_DO_NOTHING=y;;
	s) OPT_REPORT_SNAP=y;;
	t) TARGET_DS=$OPTARG;;
	v) OPT_VERBOSE=y;;
esac; done; shift $(($OPTIND-1))
[ $# = 0 ]

. "$(dirname "$(realpath "$0")")/../lib/nu_system.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_common.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_backup.sh"

nuos_init -q

maybe_yell

if srsly "${OPT_REPORT_SNAP-}"; then
	srsly "${OPT_DO_NOTHING-}"
	zfs list -H -p -r -S creation -d 1 -t snap -o name "$TARGET_DS" | head -n 1 | sed -Ee s/^.+@//
	exit
fi

require_tmp -d child_pids

clean_exit () {
	(cd "$child_pids" && kill * 2> /dev/null || true)
	retire_tmp child_pids
	exit
}

require_tmp restore_log
require_tmp -d pipes
(umask 77 && mkfifo "$pipes/recv_out")
set -T
trap 'clean_exit 2> /dev/null' HUP INT QUIT TERM EXIT
(
	(
		while :; do
			cat -u "$pipes/recv_out" &
			cat_pid=$!
			touch "$child_pids/$cat_pid"
			wait $cat_pid
			rm "$child_pids/$cat_pid"
		done
	) | sed -l -E -e '
		s/^(found) (clone origin) (.*)$/nu_restore.zfs_snap_\1	\2	\3/
		s/^(would receive|receiving) (full|incremental) stream of (.*) into (.*)$/nu_restore.zfs_snap_start	\1	\2	\3	\4/
		s/^(received) (.*) stream in (.*) \((.*)\)$/nu_restore.zfs_snap_end	\1	\2	\3	\4/
	' | while IFS='	' read event f1 f2 f3 f4; do
		echo "$event	$f1	$f2	$f3	$f4" >> "$restore_log"
		case $event in
			nu_restore.zfs_snap_found)
				what=$f1
				parent=$f2
				;;
			nu_restore.zfs_snap_start)
				ds=${f4%%@*}
				snap=${f4##*@}
				echo ${parent:+$parent ->} $ds@$snap
				;;
			nu_restore.zfs_snap_end)
				status=$f1
				size=$f2
				elapsed=$f3
				[ "$status" = received ]
				guid=`zfs get -H -p -o value guid $ds`
				if eval [ -z \"\${seen_ds_$guid-}\" ]; then
					setvar seen_ds_$guid y
					ds_mnt_info $ds >> "$restore_log"
				fi
				echo "	$size $elapsed"
				unset ds snap what parent status size elapsed guid
				;;
		esac
	done
) &

require_tmp err_report
# read -r -t 1 magic version
# [ nu_backup.zstream_bundle = "$magic" ]
# [ v0 = "$version" ]
while {
	(
		require_tmp err_out
		{
# 			read -r -t 1 magic version
# 			[ nu_backup.zstream = "$magic" ]
# 			[ v0 = "$version" ]
			zfs receive -s -d -u -v $TARGET_DS > "$pipes/recv_out" 2>| "$err_out" &
		} < /dev/stdin
		zfs_pid=$!
		touch "$child_pids/$zfs_pid"
		wait $zfs_pid
		child_exit=$?
		rm "$child_pids/$zfs_pid"
		if [ $child_exit -gt 0 ]; then
			if [ "$(cat "$err_out")" = 'cannot receive: failed to read from stream' ]; then
				retire_tmp err_out
				exit 1
			else
				cat "$err_out" >> "$err_report"
				exit $child_exit
			fi
		fi
		retire_tmp err_out
	)
	child_exit=$?
	[ $child_exit = 0 ]
}; do
done

retire_tmp pipes
if [ -f "$err_report" -a ! -s "$err_report" ]; then
	sleep 1
	echo
	echo "Restoration onto $TARGET_DS completed with no errors."
else
	cat "$err_report" >&2
	exit $child_exit
fi
retire_tmp err_report

#retire_tmp restore_log
