#!/bin/sh
set -e; set -u; set -C

# nuOS 0.0.11.0b0.1 - bin/nu_backup - LICENSE: BSD_SMPL
#
# Copyright (c) 2008-2017 Chad Jacob Milios and Crop Circle Systems, Inc.
# All rights reserved.
#
# This Source Code Form is subject to the terms of the Simplified BSD License.
# If a copy of the Simplified BSD License was not distributed alongside this file, you can
# obtain one at https://www.freebsd.org/copyright/freebsd-license.html . This software
# project is not affiliated with the FreeBSD Project.
#
# Official updates and community support available at https://nuos.org .
# Other licensing options and professional services available at https://ccsys.com .

NUOS_VER=0.0.11.0b0.1

while getopts f:l:p:sv OPT; do case $OPT in
	f) FROM_SNAP=$OPTARG;;
	l) SNAP_LABEL=$OPTARG;;
	p) POOL_NAME=$OPTARG;;
	s) OPT_ONLY_SNAP=y;;
	v) OPT_VERBOSE=y;;
esac; done; shift $(($OPTIND-1))
[ $# -ge 1 -o -f /etc/nuos/backup ]

. "$(dirname "$(realpath "$0")")/../lib/nu_system.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_common.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_backup.sh"

nuos_init -q

: ${POOL_NAME:=$POOL_BOOT_NAME}

maybe_yell

if [ -n "${FROM_SNAP-}" ]; then
	[ -z "${OPT_ONLY_SNAP-}" ]
	send_add_args="-I @$FROM_SNAP"
fi

snaptime=${SNAP_LABEL:+${SNAP_LABEL}-}t`date +%s`

require_tmp backlist

if [ $# -ge 1 ]; then
	echo $@ | xargs -n 1 >| "$backlist"
else
	grep -Ev '^#|^$' < /etc/nuos/backup >| "$backlist"
fi

require_tmp output_backlist
while read ds; do
	ds=$POOL_NAME/$ds
	while printf %s "$ds" | grep -q '('; do
		tdds=`printf %s "$ds" | sed -E -e 's/^([^(]*)\(([^)]*)\)(.*)$/\1	\2	\3/'`
		IFS='	' read left var right <<EOF
$tdds
EOF
		val=`zfs get -H -p -o value $var ${left%/}`
		[ -n "$val" -a "$val" != - ]
		ds="$left$val$right"
	done
	printf '%s\n' "$ds" >> "$output_backlist"
done < "$backlist"
retire_tmp backlist

grep -v @ "$output_backlist" | sed -e "s/\$/@$snaptime/" | xargs zfs snapshot -r

if [ -z "${OPT_ONLY_SNAP-}" ]; then
	require_tmp backup_log
	while IFS=@ read ds snap; do
		: ${snap:=$snaptime}
		echo "nu_backup.zfs_ds_start	$ds" >> "$backup_log"
		if [ -z "${FROM_SNAP-}" ]; then
			for sub_ds in `zfs get -Hp -r -t filesystem,volume -o value name $ds`; do
				echo "nu_backup.zfs_sub_ds_start	$sub_ds" >> "$backup_log"
				ds_mnt_info $sub_ds >> "$backup_log"
				found_root_ds=
				check_ds=$sub_ds
				require_tmp add_snaps
				while [ -z "$found_root_ds" ]; do
					origin=`zfs get -Hp -o value origin $check_ds`
					if [ "$origin" = - ]; then
						found_root_ds=y
					else
						echo $origin >> "$add_snaps"
						check_ds=${origin%@*}
					fi
				done
				tail -r "$add_snaps" | while read add_snap; do
					snap_guid=`zfs get -H -p -o value guid $add_snap`
					if eval [ -z \"\${seen_snap_$snap_guid-}\" ]; then
						setvar seen_snap_$snap_guid y
						echo "nu_backup.zfs_snap_start	$add_snap" >> "$backup_log"
						ds_guid=`zfs get -H -p -o value guid ${add_snap%@*}`
						if eval [ -z \"\${seen_ds_$ds_guid-}\" ]; then
							setvar seen_ds_$ds_guid y
							ds_mnt_info ${add_snap%@*} >> "$backup_log"
						fi
						zfs send -L -e -p $add_snap
						echo "nu_backup.zfs_snap_end	$add_snap" >> "$backup_log"
					fi
				done
				retire_tmp add_snaps
				echo "nu_backup.zfs_sub_ds_end	$sub_ds" >> "$backup_log"
			done
		fi
		cmd="zfs send -L -e -R ${send_add_args-} $ds@$snap"
		$cmd
		echo "nu_backup.zfs_ds_end	$ds" >> "$backup_log"
	done < "$output_backlist"
fi

retire_tmp output_backlist

#retire_tmp backup_log
