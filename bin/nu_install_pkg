#!/bin/sh
set -e; set -u; set -C

# nuOS 0.0.11.3a0 - bin/nu_install_pkg
#
# Copyright (c) 2008-2019 Chad Jacob Milios and Crop Circle Systems.
# All rights reserved.
#
# This Source Code Form is subject to the terms of the Simplified BSD License.
# If a copy of the Simplified BSD License was not distributed alongside this file, you can
# obtain one at https://www.freebsd.org/copyright/freebsd-license.html . This software
# project is not affiliated with the FreeBSD Project.
#
# Official updates and community support available at https://nuos.org .
# Professional services available at https://ccsys.com .

NUOS_VER=0.0.11.3a0

while getopts ABC:d:fFMRStvyY OPT; do case $OPT in
	A) OPT_ARG_SUBPROCESS=y;;
	B) OPT_NOBUILD=y;;
	C) CHROOTDIR=$OPTARG;;
	d) PORT_DBDIR=$OPTARG;;
	f) OPT_NOCLEAN_BEFORE=y;;
	F) OPT_NOCLEAN_AFTER=y;;
	M) OPT_NOMAKE=y;;
	R) OPT_NORECURSE=y;;
	S) OPT_NOSCRIPT=y;;
	t) OPT_TAGPKG=y;;
	v) OPT_VERBOSE=y;;
	y) OPT_YES=y;;
	Y) OPT_YES_SUBPROCESS=y;;
esac; done; shift $(($OPTIND-1))

. "$(dirname "$(realpath "$0")")/../lib/nu_system.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_common.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_make.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_ports.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_collection.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_install.sh"

maybe_yell
baseos_init -q
nuos_init -q
make_vars_init
collection_vars_init -q

if [ -n "${OPT_YES-}" ]; then
	yes | sh $0 ${OPT_ARG_SUBPROCESS:+-A} ${OPT_NOBUILD:+-B} ${OPT_NOCLEAN_BEFORE:+-f} ${OPT_NOCLEAN_AFTER:+-F} ${OPT_NOMAKE:+-M} ${OPT_NORECURSE:+-R} ${OPT_NOSCRIPT:+-S} ${OPT_TAGPKG:+-t} ${OPT_VERBOSE:+-v} ${CHROOTDIR:+-C "$CHROOTDIR"} -Y $@
	exit $?
fi

require_ports_tree
prepare_make_conf make_conf retire_make_conf_cmd

metainfo_dir="$(dirname "$(realpath "$0")")/../pkg"
if [ -z "${OPT_ARG_SUBPROCESS-}" -a -n "${CHROOTDIR-}" ]; then
	if [ ! -d "$CHROOTDIR/usr/ports/packages/All" ]; then
		mount -t nullfs /usr/ports/packages "$CHROOTDIR/usr/ports/packages"
		nullfs_mounted=y
	fi
	if mnt_dev "$CHROOTDIR"; then
		devfs_mounted=y
	fi
fi

BOOT_BASEOS_TYPE=`uname -s`
BOOT_BASEOS_VER=`uname -r`
os_compat=$BOOT_BASEOS_TYPE-${BOOT_BASEOS_VER%%-*}

for port in $*; do
	port_=`echo $port | tr / _`
	uni=${port_%%@*}
	flavor=
	case $port in
		*@*)
			flavor=${port##*@}
		;;
	esac
	args="$metainfo_dir/$uni.args"
	if [ -z "${OPT_ARG_SUBPROCESS-}" ] && [ -f "$args" ]; then
		sh $0 ${OPT_NOBUILD:+-B} ${OPT_NOCLEAN_BEFORE:+-f} ${OPT_NOCLEAN_AFTER:+-F} ${OPT_NOMAKE:+-M} ${OPT_NORECURSE:+-R} ${OPT_NOSCRIPT:+-S} ${OPT_TAGPKG:+-t} ${OPT_VERBOSE:+-v} ${CHROOTDIR:+-C $CHROOTDIR} -A `cat "$args"` $port
	else
		script="$metainfo_dir/$uni.sh"
		pkg=`pkg_name $port`
		env="$metainfo_dir/$uni.env"
		pkg_file=/usr/ports/packages/All/$pkg.txz
		if [ -n "${OPT_TAGPKG-}" ] || [ ! -e $pkg_file ] || ([ -z "${CHROOTDIR-}" -a ports-mgmt/pkg = $port ] && ! pkg info -e $pkg < /dev/null); then
			[ -z "${OPT_NOMAKE-}" ]
			if [ -z "${OPT_NORECURSE-}" ]; then
				exit 78 # this needs updating for the more specific dep_types (build run -> lib run build fetch extract patch)
				port_deps def_opts my_opts build_deps run_deps $port
				retire_tmp def_opts
				retire_tmp my_opts
				sets_union all_deps "$build_deps" "$run_deps"
				retire_tmp build_deps
				sister nu_install_pkg ${OPT_YES_SUBPROCESS:+-y} `cat "$all_deps"`
				retire_tmp all_deps
				if [ -n "${CHROOTDIR-}" ]; then
					sister nu_install_pkg -C $CHROOTDIR ${OPT_YES_SUBPROCESS:+-y} `cat "$run_deps"`
				fi
				retire_tmp run_deps
			fi
			destdir=
			makeargs="$metainfo_dir/$uni.makeargs"
			if [ -z "${OPT_NOSCRIPT-}" ] && [ -f "$script" ]; then
				pkg_step=pre-build
				. "$script"
			fi
			(
				cd /usr/ports/${port%%@*}
				if [ -f "$metainfo_dir/$uni.newflavor" ]; then
					def_flavors=$(env `cat "$env" 2>/dev/null` make "__MAKE_CONF=$make_conf" PORT_DBDIR="$PORT_DBDIR" ${flavor:+FLAVOR=$flavor} `cat "$makeargs" 2>/dev/null` -DBATCH -DNO_DEPENDS -VFLAVORS)
					new_flavor=`cat "$metainfo_dir/$uni.newflavor"`
				fi
				[ -n "${OPT_NOCLEAN_BEFORE-}" ] || make ${new_flavor:+FLAVORS="$def_flavors $new_flavor"} ${flavor:+FLAVOR=$flavor} -DNOCLEANDEPENDS clean
				[ -n "${OPT_NOBUILD-}" ] || env `cat "$env" 2>/dev/null` make "__MAKE_CONF=$make_conf" PORT_DBDIR="$PORT_DBDIR" ${new_flavor:+FLAVORS="$def_flavors $new_flavor"} ${flavor:+FLAVOR=$flavor} `cat "$makeargs" 2>/dev/null` -DBATCH -DNO_DEPENDS package
				[ -n "${OPT_NOBUILD-}" ] || lockf -k "${CHROOTDIR-}/var/run/nu_install_pkg.pkgdb.lock" env `cat "$env" 2>/dev/null` make "__MAKE_CONF=$make_conf" PORT_DBDIR="$PORT_DBDIR" ${new_flavor:+FLAVORS="$def_flavors $new_flavor"} ${flavor:+FLAVOR=$flavor} `cat "$makeargs" 2>/dev/null` -DBATCH -DNO_DEPENDS install
				[ -n "${OPT_NOCLEAN_AFTER-}" ] || make ${new_flavor:+FLAVORS="$def_flavors $new_flavor"} ${flavor:+FLAVOR=$flavor} -DNOCLEANDEPENDS clean
			)
			[ -f $pkg_file ]
			if [ -z "${OPT_NOSCRIPT-}" ] && [ -f "$script" ]; then
				pkg_step=post-build
				. "$script"
			fi
			if tag=`pkg_db_tag` && [ $tag = `ports_tag` ] && [ ! -L $pkg_file ]; then
				mkdir -p "/usr/ports/packages/Index.nuOS/$os_compat-$TRGT_MACH"
				idx=`nuos_sha_fngr "$make_conf" "$env" "$makeargs" /var/db/nuos/pkg/$port_/settings /var/db/nuos/pkg/$port_/dependencies/all`
				mv -v $pkg_file "/usr/ports/packages/Index.nuOS/$os_compat-$TRGT_MACH/$pkg.$tag.$idx.txz"
				ln -s "../Index.nuOS/$os_compat-$TRGT_MACH/$pkg.$tag.$idx.txz" $pkg_file
			fi
		fi
		if pkg info -e $pkg < /dev/null && ( [ -z "${CHROOTDIR-}" ] || pkg ${CHROOTDIR:+-c $CHROOTDIR} info -e $pkg < /dev/null ); then
			echo found dependency $pkg
		else
			if [ -z "${OPT_NORECURSE-}" ]; then
				pkg_deps -m -p needed_deps $pkg
				cat "$needed_deps"
				sister nu_install_pkg -C '' ${OPT_YES_SUBPROCESS:+-y} `cat "$needed_deps"`
				if [ -n "${CHROOTDIR-}" ]; then
					sister nu_install_pkg -C $CHROOTDIR ${OPT_YES_SUBPROCESS:+-y} `cat "$needed_deps"`
				fi
				retire_tmp needed_deps
			fi
			destdir="${CHROOTDIR-}"
			if [ -f "$script" ]; then
				pkg_step=pre-install
				. "$script"
			fi
			env `cat "$env" 2>/dev/null` pkg ${CHROOTDIR:+-c $CHROOTDIR} info -e $pkg || lockf -k "${CHROOTDIR-}/var/run/nu_install_pkg.pkgdb.lock" env `cat "$env" 2>/dev/null` pkg ${CHROOTDIR:+-c $CHROOTDIR} add -M $pkg_file
			if [ -f "$script" ]; then
				pkg_step=post-install
				. "$script"
			fi
		fi
		pkg ${CHROOTDIR:+-c $CHROOTDIR} info -e $pkg
	fi
done
if [ -n "${nullfs_mounted-}" ]; then
	umount "$CHROOTDIR/usr/ports/packages"
fi
if [ -n "${devfs_mounted-}" ]; then
	umount "$CHROOTDIR/dev"
fi

$retire_make_conf_cmd make_conf
