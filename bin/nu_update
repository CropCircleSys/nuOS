#!/bin/sh
set -e; set -u; set -C

# nuOS 0.0.9.2b2 - bin/nu_update - LICENSE: BSD_SMPL
#
# Copyright (c) 2008-2014 Chad Jacob Milios and Crop Circle Systems, Inc.
# All rights reserved.
#
# This Source Code Form is subject to the terms of the Simplified BSD License.
# If a copy of the Simplified BSD License was not distributed alongside this file, you can
# obtain one at http://www.freebsd.org/copyright/freebsd-license.html . This software
# project is not affiliated with the FreeBSD Project.
#
# Official updates and community support available at http://nuos.org .
# Other licensing options and professional services available at http://ccsys.com .

NUOS_VER=0.0.9.2b2

while getopts dDJ:o:qsSuUv OPT; do case $OPT in
	d) OPT_DEPS=y;;
	D) OPT_DEBUG=y;;
	J) JAIL_NAME=$OPTARG;;
	o) OUTPUT_FILE=$OPTARG;;
	q) OPT_QUICK=y;;
	s) OPT_ONLY_SNAP=y;;
	S) OPT_NO_SNAP=y;;
	u) OPT_UPDATES=y;;
	U) OPT_DEP_UPDATES=y;;
	v) OPT_VERBOSE=y;;
esac; done; shift $(($OPTIND-1))
[ $# = 0 ]

[ -n "${OPT_ONLY_SNAP-}" ] || [ ! -e "$OUTPUT_FILE" -o ! -s "$OUTPUT_FILE" ] 

. "$(dirname "$(realpath "$0")")/../lib/nu_system.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_make.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_ports.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_common.sh"

baseos_init
nuos_init

maybe_pause
maybe_yell

if [ -n "${JAIL_NAME-}" ]; then
	CHROOTDIR="/var/jail/$JAIL_NAME"
fi

[ -f /usr/ports/.portsnap.INDEX ]
[ -f /var/db/portsnap/INDEX ]
[ ! /usr/ports/.portsnap.INDEX -ot /var/db/portsnap/INDEX ]

[ `cut -d '|' -f 2 /var/db/portsnap/tag` = `cat "${CHROOTDIR-}/var/db/nuos/pkg/tag"` ]

if [ -n "${OPT_NO_SNAP-}" ]; then
	require_tmp previous_moved_tbl
	cat /usr/ports/MOVED >| "$previous_moved_tbl"
else
	packages_dataset=`mount -p | awk '{if ($2=="/usr/ports/packages") print $1}'`
	packages_nuos_ver=${packages_dataset##*/}
	snaptime=t`date +%s`
	zfs snapshot -r $POOL_BOOT_NAME/os/$BASEOS_TYPE/ports@$snaptime $packages_dataset@$snaptime
	if [ $packages_nuos_ver != $NUOS_VER ]; then
		zfs set canmount=off $packages_dataset
		zfs clone -o mountpoint=/usr/ports/packages $packages_dataset@$snaptime $POOL_BOOT_NAME/os/$HOSTOS_TYPE/pkg/$NUOS_VER
	fi
	previous_moved_tbl=/usr/ports/.zfs/snapshot/$snaptime/MOVED
fi
[ -z "${OPT_ONLY_SNAP-}" ] || exit

require_ports_tree -e

portsnap fetch
require_tmp portsnap_update_out
portsnap update | tee -a "$portsnap_update_out"

require_tmp all_updated_ports
sed -nEe '/^\/usr\/ports\/([[:lower:]].*)\/$/{s//\1/;s/\/$//;p;}' "$portsnap_update_out" >| "$all_updated_ports"
retire_tmp portsnap_update_out

require_tmp interested_ports
ls "${CHROOTDIR-}/var/db/nuos/pkg" | grep _ | sed -e 's|_|/|' >| "$interested_ports"

require_tmp -d new_to_old
require_tmp -d old_to_new
for port in `cat "$interested_ports"`; do
	port_=`echo $port | tr / _`
	echo $port > "$new_to_old/$port_"
	echo $port > "$old_to_new/$port_"
done

require_tmp old_moved
grep -v '^#' "$previous_moved_tbl" | cut -d '|' -f 1-3 >| $old_moved
if [ -n "${OPT_NO_SNAP-}" ]; then
	retire_tmp previous_moved_tbl
fi
require_tmp new_moved
grep -v '^#' /usr/ports/MOVED | cut -d '|' -f 1-3 >| $new_moved
require_tmp moved_ports
diff "$old_moved" "$new_moved" | sed -nEe '/^>[[:blank:]]+/{s///;p;}' >| "$moved_ports"
retire_tmp old_moved
retire_tmp new_moved

require_tmp -d deleted_ports_dir
while IFS='|' read old new date; do
	old_=`echo $old | tr / _`
	if [ -e "$new_to_old/$old_" ]; then
		if [ -n "$new" ]; then
			echo $new >| "$old_to_new/`cat "$new_to_old/$old_" | tr / _`"
			new_=`echo $new | tr / _`
			mv -n "$new_to_old/$old_" "$new_to_old/$new_"
		else
			: >| "$old_to_new/`cat "$new_to_old/$port_" | tr / _`"
			mv -n "$new_to_old/$old_" "$deleted_ports_dir/"
		fi
	fi
done < "$moved_ports"
retire_tmp moved_ports

require_tmp my_ports
for port in `cat "$interested_ports"`; do
	port_=`echo $port | tr / _`
	if [ -e "$deleted_ports_dir/$port_" ]; then
		require_tmp -l deleted_ports my_deleted_ports
		echo $port `pkg_name -i $port` >> "$my_deleted_ports"
	else
		if [ -s "$old_to_new/$port_" ]; then
			cat "$old_to_new/$port_" >> "$my_ports"
		fi 
	fi
done
retire_tmp interested_ports
retire_tmp deleted_ports_dir
retire_tmp -k my_deleted_ports

sets_intrsctn updated_ports "$my_ports" "$all_updated_ports"
retire_tmp my_ports
retire_tmp all_updated_ports

require_tmp -l updated_ports_table updt_tbl
require_tmp -l upgraded_principals prncpls
require_tmp -l dependants_of_upgrades deps
require_tmp -l slaves_of_upgrades slvs
require_tmp -l updated_principals updt_prncpls
require_tmp -l dependants_of_updates updt_deps
require_tmp -l slaves_of_updates updt_slvs
for port in `cat "$updated_ports"`; do
	port_=`echo $port | tr / _`
	metainfo_dir="${CHROOTDIR-}/var/db/nuos/pkg/`cat "$new_to_old/$port_" | tr / _`"
	old=`cat "$metainfo_dir/name"`
	[ -n "$old" ]
	new=`pkg_name $port`
	[ -n "$new" ]
	if [ $old = $new ]; then
		indicator==
		principals=$updt_prncpls
		dependants=$updt_deps
		slaves=$updt_slvs
	else
		indicator=+
		principals=$prncpls
		dependants=$deps
		slaves=$slvs
	fi
	echo $old >> "$principals"
	${CHROOTDIR:+chroot "$CHROOTDIR"} pkg_info -qR $old 2> /dev/null | sed -e "/^\$/d;s/^/$old /" >> "$dependants"
	if [ -e "$metainfo_dir/slaves" ]; then
		for slave_port in `cat "$metainfo_dir/slaves"`; do
			slave=$(cat "${CHROOTDIR-}/var/db/nuos/pkg/`echo $slave_port | tr / _`/name")
			echo $old $slave >> "$slaves"
		done
	fi
	echo $indicator `cat "$new_to_old/$port_"` $port $old $new | tee -a "$updt_tbl"
done
retire_tmp updated_ports
retire_tmp new_to_old
retire_tmp old_to_new
retire_tmp updt_tbl

require_tmp obsolete_pkgs

cat "$prncpls" >> "$obsolete_pkgs"
cat "$slvs" | cut -w -f 2 >> "$obsolete_pkgs"
[ -z "${OPT_DEPS-}" ] || cat "$deps" | cut -w -f 2 >> "$obsolete_pkgs"
[ -z "${OPT_UPDATES-}" ] || cat "$updt_prncpls" >> "$obsolete_pkgs"
[ -z "${OPT_UPDATES-}" ] || cat "$updt_slvs" | cut -w -f 2 >> "$obsolete_pkgs"
[ -z "${OPT_DEP_UPDATES-}" ] || cat "$updt_deps" | cut -w -f 2 >> "$obsolete_pkgs"

retire_tmp prncpls
retire_tmp deps
retire_tmp slvs
retire_tmp updt_prncpls
retire_tmp updt_deps
retire_tmp updt_slvs

sort -u "$obsolete_pkgs" >| "$OUTPUT_FILE"
retire_tmp obsolete_pkgs

new_tag=`cut -d '|' -f 2 /var/db/portsnap/tag`

echo "Upgrade planning complete. Ports tree is now tagged $new_tag (`env TZ=UTC date -j -f %s $new_tag`)."
