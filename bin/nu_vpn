#!/bin/sh
set -e; set -u; set -C

# nuOS 0.0.11.4a0 - bin/nu_vpn
#
# Copyright (c) 2008-2020 Chad Jacob Milios and Crop Circle Systems.
# All rights reserved.
#
# This Source Code Form is subject to the terms of the Simplified BSD License.
# If a copy of the Simplified BSD License was not distributed alongside this file, you can
# obtain one at https://www.freebsd.org/copyright/freebsd-license.html . This software
# project is not affiliated with the FreeBSD Project.
#
# Official updates and community support available at https://nuos.org .
# Professional services available at https://ccsys.com .

NUOS_VER=0.0.11.4a0

while getopts a:A:b:c:C:h:m:M:n:p:qv OPT; do case $OPT in
	a) CERT_AUTH=$OPTARG;;
	A) ALTERNATE=$OPTARG;;
	b) KEY_BITS=$OPTARG;;
	c) CIPHER=$OPTARG;;
	C) CHROOTDIR=$OPTARG;;
	h) HOST_NAME=$OPTARG;;
	m) PRIVATE_MASK=$OPTARG;;
	M) MSG_AUTH=$OPTARG;;
	n) PRIVATE_NET=$OPTARG;;
	p) POOL_NAME=$OPTARG;;
	q) OPT_QUICK=y;;
	v) OPT_VERBOSE=y;;
esac; done; shift $(($OPTIND-1))
[ $# = 0 ]

[ -z "${CHROOTDIR-}" ] || exit 43 # CHROOTDIR is unsupported, though we want to some day so most of the code is still written with support

. "$(dirname "$(realpath "$0")")/../lib/nu_system.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_common.sh"

nuos_init
nuos_ssl_init

: ${PRIVATE_NET:=172.`seq 16 31 | sort -R | head -n 1`.0.0}
case $PRIVATE_NET in
	*/*)
		mask_bits=${PRIVATE_NET##*/}
		PRIVATE_MASK=0x`echo "obase=16; 2^32 - 2^(32-$mask_bits)" | bc | tr A-F a-f`
		PRIVATE_NET=${PRIVATE_NET%/*}
esac

: ${HOST_NAME:=$HOST}
: ${CERT_AUTH:=`$SSL_CMD x509 -noout -issuer -nameopt sep_multiline -in "${CHROOTDIR-}/etc/ssl/certs/$HOST_NAME.internal.crt" | sed -Ee '/^[[:blank:]]*CN=/!d;s/^[[:blank:]]*CN=//'`}
: ${KEY_BITS:=`$SSL_CMD x509 -noout -text -nameopt sep_multiline -certopt no_version,no_serial,no_signame,no_validity,no_subject,no_issuer,no_sigdump,no_aux,no_extensions -in "${CHROOTDIR-}/etc/ssl/certs/$HOST_NAME.internal.crt" | sed -Ee '/^[[:blank:]]+.*\<Public-Key: \(([[:digit:]]+) bit\)$/!d;s//\1/'`}
if [ "${basis_bits:=$KEY_BITS}" -gt 4096 ]; then
	basis_bits=4096
fi
echo 'cert authority  -a CERT_AUTH      ' $CERT_AUTH
echo 'key bits        -b KEY_BITS       ' $KEY_BITS
echo 'stream cipher   -c CIPHER         ' ${CIPHER:=AES-$(($basis_bits/16))-GCM}
echo 'msg auth code   -M MSG_AUTH       ' ${MSG_AUTH:=SHA$(($basis_bits/8))}
echo 'prng digest alg  " PRNG_ALG       ' ${PRNG_ALG:=$MSG_AUTH}
echo 'nonce bytes      " NONCE_LENGTH   ' ${NONCE_LENGTH:=$(($basis_bits/128))}
echo 'host name       -h HOST_NAME      ' $HOST_NAME
echo 'identifier      -A ALTERNATE      ' ${ALTERNATE-}
echo 'private netmask -m PRIVATE_MASK   ' ${PRIVATE_MASK:=0xffff0000}
echo 'private net     -n PRIVATE_NET    ' $PRIVATE_NET
echo 'pool name       -p POOL_NAME      ' ${POOL_NAME:=$POOL_BOOT_NAME}
echo

maybe_pause
maybe_yell

case $PRIVATE_MASK in
	0x*)
		PRIVATE_MASK=$(($PRIVATE_MASK / 0x1000000)).$(($PRIVATE_MASK % 0x1000000 / 0x10000)).$(($PRIVATE_MASK % 0x10000 / 0x100)).$(($PRIVATE_MASK % 0x100))
esac

if [ ! -d "${CHROOTDIR-}/usr/local/etc/openvpn" ]; then
	mkdir "${CHROOTDIR-}/usr/local/etc/openvpn"
	(umask 77 && mkdir "${CHROOTDIR-}/usr/local/etc/openvpn/private")
	if zfs list $POOL_NAME-pvt > /dev/null 2>&1; then # this check may need to be refined in order to support CHROOTDIR
		chflags schg "${CHROOTDIR-}/usr/local/etc/openvpn/private"
		zfs create -o mountpoint=/usr/local/etc/openvpn/private $POOL_NAME-pvt/sys/host/vpn-ssl
		chmod go-rx "${CHROOTDIR-}/usr/local/etc/openvpn/private"
	fi
fi

cp "${CHROOTDIR-}/etc/ssl/certs/$CERT_AUTH.internal.crt" "${CHROOTDIR-}/usr/local/etc/openvpn/${ALTERNATE:+${ALTERNATE}_}ca.crt"
cp "${CHROOTDIR-}/etc/ssl/certs/$HOST_NAME.internal.crt" "${CHROOTDIR-}/usr/local/etc/openvpn/${ALTERNATE:+${ALTERNATE}_}server.crt"
cp "${CHROOTDIR-}/etc/ssl/private/$HOST_NAME.key" "${CHROOTDIR-}/usr/local/etc/openvpn/private/${ALTERNATE:+${ALTERNATE}_}server.key"
openvpn --genkey --secret "${CHROOTDIR-}/usr/local/etc/openvpn/private/${ALTERNATE:+${ALTERNATE}_}hs.key"
$SSL_CMD dhparam -out "${CHROOTDIR-}/usr/local/etc/openvpn/${ALTERNATE:+${ALTERNATE}_}dh$KEY_BITS.pem" $KEY_BITS

cat > "${CHROOTDIR-}/usr/local/etc/openvpn/openvpn${ALTERNATE:+_$ALTERNATE}.conf" <<EOF
dev tun
topology subnet
server $PRIVATE_NET $PRIVATE_MASK
tls-version-min 1.2
ca ${ALTERNATE:+${ALTERNATE}_}ca.crt
cert ${ALTERNATE:+${ALTERNATE}_}server.crt
key private/${ALTERNATE:+${ALTERNATE}_}server.key
dh ${ALTERNATE:+${ALTERNATE}_}dh$KEY_BITS.pem
tls-crypt private/${ALTERNATE:+${ALTERNATE}_}hs.key
ncp-disable
opt-verify
cipher $CIPHER
auth $MSG_AUTH
prng $PRNG_ALG $NONCE_LENGTH
compress lz4
user nobody
group nobody
persist-key
persist-tun
status ${ALTERNATE:+${ALTERNATE}_}openvpn-status.log
ifconfig-pool-persist ${ALTERNATE:+${ALTERNATE}_}ipp.txt
keepalive 15 90
EOF

if [ ! -e "${CHROOTDIR-}/usr/local/etc/rc.d/openvpn${ALTERNATE:+_$ALTERNATE}" ]; then
	ln -s "${CHROOTDIR-}/usr/local/etc/rc.d/openvpn" "${CHROOTDIR-}/usr/local/etc/rc.d/openvpn${ALTERNATE:+_$ALTERNATE}"
fi

sister enable_svc ${CHROOTDIR:+-C "$CHROOTDIR"} openvpn${ALTERNATE:+_$ALTERNATE}

echo "Configured vpn service."
