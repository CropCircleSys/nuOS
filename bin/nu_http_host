#!/bin/sh
set -e; set -u; set -C

# nuOS 0.0.11.3a0 - bin/nu_http_host
#
# Copyright (c) 2008-2019 Chad Jacob Milios and Crop Circle Systems.
# All rights reserved.
#
# This Source Code Form is subject to the terms of the Simplified BSD License.
# If a copy of the Simplified BSD License was not distributed alongside this file, you can
# obtain one at https://www.freebsd.org/copyright/freebsd-license.html . This software
# project is not affiliated with the FreeBSD Project.
#
# Official updates and community support available at https://nuos.org .
# Professional services available at https://ccsys.com .

NUOS_VER=0.0.11.3a0

while getopts aC:fgGh:Hikp:su:vW OPT; do case $OPT in
	a) OPT_APP_HARD=y;;
	C) CHROOTDIR=$OPTARG;;
	f) OPT_HPKP_FORCE=y;;
	g) OPT_GZIP=y;;
	G) OPT_STATIC_GZIP=y;;
	h) HOST_NAME=$OPTARG;;
	H) OPT_NO_HTTP2=y;;
	i) OPT_IMMUTABLE=y;;
	k) [ -n "${OPT_HPKP-}" ] && OPT_HPKPSUBDOM=y || OPT_HPKP=y;;
	K) HPKP_BACKUP=$OPTARG;;
	p) PROXY_TO=$OPTARG;;
	s) [ -n "${OPT_SSL-}" ] && { [ -n "${OPT_HSTS-}" ] && { [ -n "${OPT_HSTSSUBDOM-}" ] && OPT_HSTSPRELOAD=y || OPT_HSTSSUBDOM=y; } || OPT_HSTS=y; } || OPT_SSL=y;;
	u) USER_NAME=$OPTARG;;
	v) OPT_VERBOSE=y;;
	W) OPT_NO_WEBSOCKET=y;;
esac; done; shift $(($OPTIND-1))
[ $# = 0 ]

. "$(dirname "$(realpath "$0")")/../lib/nu_system.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_common.sh"

nuos_init

echo 'host name       -h HOST_NAME      ' ${HOST_NAME:=$HOST}
echo 'user name       -u USER_NAME      ' ${USER_NAME:=$(pw -V "${CHROOTDIR-}/etc" usershow $((`pw -V "${CHROOTDIR-}/etc" usernext | cut -d : -f 1`-1)) | cut -d : -f 1)}
echo -n 'hardened app    -a OPT_APP_HARD    ' && [ -n "${OPT_APP_HARD-}" ] && echo set || echo null
echo -n 'dynamic comprsn -g OPT_GZIP        ' && [ -n "${OPT_GZIP-}" ] && echo set || echo null
echo -n 'static comprsn  -G OPT_STATIC_GZIP ' && [ -n "${OPT_STATIC_GZIP-}" ] && echo set || echo null
echo -n 'immutable dir   -i OPT_IMMUTABLE   ' && [ -n "${OPT_IMMUTABLE-}" ] && echo set || echo null
echo -n 'pubkey pinning  -k OPT_HPKP        ' && [ -n "${OPT_HPKP-}" ] && echo set || echo null
if [ -n "${OPT_HPKP-}" ]; then
	echo -n 'hpkp subdoms   -kk OPT_HPKPSUBDOM  ' && [ -n "${OPT_HPKPSUBDOM-}" ] && echo set || echo null
	echo 'backup key      -K HPKP_BACKUP    ' "${HPKP_BACKUP:=${CHROOTDIR-}/etc/ssl/csrs.next/$HOST_NAME.csr}"
	echo -n 'enable hpkp     -f OPT_HPKP_FORCE  ' && [ -n "${OPT_HPKP_FORCE-}" ] && echo set || echo 'null (preconfigured, commented out)'
fi
echo -n 'ssl             -s OPT_SSL         ' && [ -n "${OPT_SSL-}" ] && echo set || echo null
echo -n 'hsts (rfc6797) -ss OPT_HSTS        ' && [ -n "${OPT_HSTS-}" ] && echo set || echo null
echo -n 'hsts subdoms  -sss OPT_HSTSSUBDOM  ' && [ -n "${OPT_HSTSSUBDOM-}" ] && echo set || echo null
echo -n 'hsts preload -ssss OPT_HSTSPRELOAD ' && [ -n "${OPT_HSTSPRELOAD-}" ] && echo set || echo null
if [ -z "${OPT_APP_HARD-}" ]; then
	loose_app_security=y
	cat <<'EOF'

    * ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** *
    ** ** ** ** ** ** ** ** **
     ** ** ** ** ** ** ** ** * WARNING: You've left our hardened app security
    * ** ** ** ** ** ** ** **           defaults unselected. We've inserted
    ** ** ** ** ** ** ** ** **          them into the configuration file for
     ** ** ** ** ** ** ** ** *          you, just commented out. Remember to
    * ** ** ** ** ** ** ** **           inspect and adjust them to suit your
    ** ** ** ** ** ** ** ** **          specific needs.
     ** ** ** ** ** ** ** ** *
    * ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** *
EOF
fi
if [ -n "${OPT_GZIP-}" -o -n "${OPT_STATIC_GZIP-}" ]; then
	cat <<'EOF'

    * ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** *
    ** ** ** ** ** ** ** ** **
     ** ** ** ** ** ** ** ** * WARNING: Enabling compression can open up your
    * ** ** ** ** ** ** ** **           application to a whole class of attack
    ** ** ** ** ** ** ** ** **          vectors collectively known as BREACH
     ** ** ** ** ** ** ** ** *          attacks. Be sure this type of attack
    * ** ** ** ** ** ** ** **           doesn't apply to your use case or else
    ** ** ** ** ** ** ** ** **          implement sufficient mitigations.
     ** ** ** ** ** ** ** ** *
    * ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** *
EOF
fi
if [ -n "${OPT_IMMUTABLE-}" ]; then
	cat <<EOF

    * ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** *
    ** ** ** ** ** ** ** ** **
     ** ** ** ** ** ** ** ** * WARNING: You've enabled an immutable directory
    * ** ** ** ** ** ** ** **           (/${IMMUTABLE_DIR:=static}) which constitues an unbreakable
    ** ** ** ** ** ** ** ** **          promise that every resource served from
     ** ** ** ** ** ** ** ** *          within to any client even but once will
    * ** ** ** ** ** ** ** **           and shall forevermore be considered the
    ** ** ** ** ** ** ** ** **          final version of that resource and may
     ** ** ** ** ** ** ** ** *          optimally be served by any other proxy
    * ** ** ** ** ** ** ** **           or cache to fulfill any and all similar
    ** ** ** ** ** ** ** ** **          future requests made by any client, no
     ** ** ** ** ** ** ** ** *          need to ever again check or notify the
    * ** ** ** ** ** ** ** **           server. You cannot revoke, expire or
    ** ** ** ** ** ** ** ** **          invalidate any such served resource so
     ** ** ** ** ** ** ** ** *          this is best used with identifiers that
    * ** ** ** ** ** ** ** **           are content-specific or monotonic; the
    ** ** ** ** ** ** ** ** **          idea being to fulfill a use case where
     ** ** ** ** ** ** ** ** *          server load is greatly reduced while
    * ** ** ** ** ** ** ** **           resources are spread among proxies and
    ** ** ** ** ** ** ** ** **          caches which become authoritative to
     ** ** ** ** ** ** ** ** *          respond to said client requests in the
    * ** ** ** ** ** ** ** **           quickest and most scalable manner.
    ** ** ** ** ** ** ** ** **
     ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **
EOF
fi
if [ -n "${OPT_HSTS-}" ]; then
	: ${HSTS_DURATION:=$((365*24*60*60))}
	[ -z "${OPT_HSTSPRELOAD-}" ] || [ "$HSTS_DURATION" -ge 31536000 ]
	cat <<EOF

    * ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** *
    ** ** ** ** ** ** ** ** **
     ** ** ** ** ** ** ** ** * WARNING: Once you enable HSTS, EVEN JUST ONCE,
    * ** ** ** ** ** ** ** **           $HOST_NAME ${OPT_HSTSSUBDOM:+AND ALL SUBDOMAINS}
    ** ** ** ** ** ** ** ** **          CAN'T back out for $(($HSTS_DURATION/86400)) days.
     ** ** ** ** ** ** ** ** *          You darn sure better know what you're
    * ** ** ** ** ** ** ** **           getting into. Read RFC 6797 for info.
    ** ** ** ** ** ** ** ** **
     ** ** ** ** ** ** ** ** * NOTICE:  Consider registering $HOST_NAME
    * ** ** ** ** ** ** ** **           at https://hstspreload.appspot.com for
    ** ** ** ** ** ** ** ** **          added first-visit security (inclusion
     ** ** ** ** ** ** ** ** *          in built-in lists of participating
    * ** ** ** ** ** ** ** **           browsers and clients).
    ** ** ** ** ** ** ** ** **
     ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **
EOF
fi
if [ -n "${OPT_HPKP-}" ]; then
	: ${HPKP_DURATION:=$((60*24*60*60))}
	[ "$HPKP_DURATION" -le 5184000 ]
	cat <<EOF

    * ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** *
    ** ** ** ** ** ** ** ** **
     ** ** ** ** ** ** ** ** * WARNING: Once you enable HPKP, EVEN JUST ONCE,
    * ** ** ** ** ** ** ** **           $HOST_NAME ${OPT_HPKPSUBDOM:+AND ALL SUBDOMAINS}
    ** ** ** ** ** ** ** ** **          CAN'T back out for $(($HPKP_DURATION/86400)) days.
     ** ** ** ** ** ** ** ** *          You darn sure better know what you're
    * ** ** ** ** ** ** ** **           getting into. Read RFC 7469 for info.
    ** ** ** ** ** ** ** ** **          Spread 99 encrypted copies of your
     ** ** ** ** ** ** ** ** *          backup key to all four corners of the
    * ** ** ** ** ** ** ** **           earth. Don't say we did't warn you.
    ** ** ** ** ** ** ** ** **
     ** ** ** ** ** ** ** ** * NOTICE:  Check that the following HPKP header
    * ** ** ** ** ** ** ** **           immediately below looks sane.
    ** ** ** ** ** ** ** ** **
     ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **
EOF
fi
echo

maybe_yell

[ -n "${OPT_SSL-}" ] || [ -z "${OPT_HSTS-}" ]
[ -n "${OPT_HSTS-}" ] || [ -z "${OPT_HSTSSUBDOM-}" ]
[ -n "${OPT_HSTSSUBDOM-}" ] || [ -z "${OPT_HSTSPRELOAD-}" ]
[ -n "${OPT_SSL-}" ] || [ -z "${OPT_HPKP-}" ]
[ -z "${OPT_HPKP-}" ] || [ -f "$HPKP_BACKUP" ]
[ -n "${OPT_HPKP-}" ] || [ -z "${OPT_HPKPSUBDOM-}" ]

service=apache24

mkdir -p "${CHROOTDIR-}/var/log/httpd-vhost"

[ ! -e "${CHROOTDIR-}/usr/local/etc/$service/Includes/$HOST_NAME.conf" ]

user_home=`pw -V "${CHROOTDIR-}/etc" usershow $USER_NAME | cut -d : -f 9`

${CHROOTDIR:+chroot "$CHROOTDIR"} su -m $USER_NAME -c "mkdir -p \"$user_home/$HOST_NAME/www/public${OPT_IMMUTABLE:+/$IMMUTABLE_DIR}\""

if [ -n "${OPT_SSL-}" ]; then
	if ! cp "${CHROOTDIR-}/etc/ssl/certs/$HOST_NAME.crt" "${CHROOTDIR-}/usr/local/etc/$service/ssl/"; then
		cp "${CHROOTDIR-}/etc/ssl/certs/$HOST_NAME.internal.crt" "${CHROOTDIR-}/usr/local/etc/$service/ssl/$HOST_NAME.crt"
		internal=y
	fi
	mkdir -p "${CHROOTDIR-}/etc/ssl/certs.installed/localhost/$HOST_NAME.${internal:+internal.}crt"
	ln -s -f "/usr/local/etc/$service/ssl/$HOST_NAME.crt" "${CHROOTDIR-}/etc/ssl/certs.installed/localhost/$HOST_NAME.${internal:+internal.}crt/$service"
	cp "${CHROOTDIR-}/etc/ssl/private/$HOST_NAME.key" "${CHROOTDIR-}/usr/local/etc/$service/ssl/private/"
	if cp "${CHROOTDIR-}/etc/ssl/certs/$HOST_NAME.ca.crt" "${CHROOTDIR-}/usr/local/etc/$service/ssl/"; then
		mkdir -p "${CHROOTDIR-}/etc/ssl/certs.installed/localhost/$HOST_NAME.ca.crt"
		ln -s -f "/usr/local/etc/$service/ssl/$HOST_NAME.ca.crt" "${CHROOTDIR-}/etc/ssl/certs.installed/localhost/$HOST_NAME.ca.crt/$service"
	else
		self_signed=y
	fi
	if [ -n "${OPT_HPKP-}" ]; then
		[ -n "${OPT_HPKP_FORCE-}" ] || hpkp_commented=y
		hpkp_header_value="`sister nu_ssl -k -h $HOST_NAME`; `sister nu_ssl -k -K "$HPKP_BACKUP"`; max-age=$HPKP_DURATION${OPT_HPKPSUBDOM:+; includeSubDomains}"
		echo "The very next line is the exact HTTP header to enable HPKP which will be included in every HTTP response:"
		echo "Public-Key-Pins: $hpkp_header_value"
		echo
		echo "The very next line is the exact Apache configuration directive used to ${hpkp_commented:+configure}${OPT_HPKP_FORCE:+enable} HPKP which will be included in the VirtualHost context:"
		cat <<EOF
${hpkp_commented:+#}Header always set Public-Key-Pins '$hpkp_header_value'
EOF
		echo
	fi
else
	no_ssl=y
fi

if [ -n "${PROXY_TO-}" ]; then
	PROXY_TO="${PROXY_TO%/}"
	if [ "$PROXY_TO" != "${PROXY_TO#h2://}" ]; then
		backend_ssl=y
		backend_scheme=h2
		PROXY_TO="${PROXY_TO#h2://}"
	elif [ "$PROXY_TO" != "${PROXY_TO#https://}" ]; then
		backend_ssl=y
		backend_scheme=https
		PROXY_TO="${PROXY_TO#https://}"
	elif [ "$PROXY_TO" != "${PROXY_TO#h2c://}" ]; then
		backend_scheme=h2c
		PROXY_TO="${PROXY_TO#h2c://}"
	else
		backend_scheme=http
		PROXY_TO="${PROXY_TO#http://}"
	fi
	backend_host="${PROXY_TO%%/*}"
	backend_host="${backend_host%:*}"
fi

[ -n "${OPT_NO_HTTP2-}" ] || h2=y
[ -n "${OPT_NO_WEBSOCKET-}" ] || ws=y

cat > "${CHROOTDIR-}/usr/local/etc/$service/Includes/$HOST_NAME.conf" <<EOF
<VirtualHost ${OPT_SSL:+_default_:443}${no_ssl:+*:80}>
	ServerName $HOST_NAME${OPT_SSL:+:443}
	ServerAdmin webmaster@$HOST_NAME
	DocumentRoot "$user_home/$HOST_NAME/www/public"
	${loose_app_security:+#}Header always setifempty Content-Security-Policy "default-src 'self'; base-uri 'self'; form-action 'self'; frame-ancestors 'self'; object-src 'none'"
	${loose_app_security:+#}Header always setifempty X-Frame-Options SAMEORIGIN
	${loose_app_security:+#}Header always setifempty X-XSS-Protection "1; mode=block"
	${loose_app_security:+#}Header always set X-Content-Type-Options nosniff
${PROXY_TO:+${ws:+	RewriteEngine On
	RewriteCond %{HTTP:Connection\} Upgrade [nocase]
	RewriteCond %{HTTP:Upgrade\} websocket [nocase]
	RewriteRule /(.*) ws${backend_ssl:+s}://$PROXY_TO/\$1 [proxy,END]
}	ProxyPass / $backend_scheme://$PROXY_TO/
	ProxyPassReverse / http${backend_ssl:+s}://$PROXY_TO/
	ProxyPassReverseCookieDomain $backend_host $HOST_NAME
	ProxyPreserveHost On
${backend_ssl:+	SSLProxyEngine on
	SSLProxyVerify require
	SSLProxyVerifyDepth 10
	SSLProxyCACertificateFile /usr/local/etc/ssl/cert.pem
}}${OPT_SSL:+	SSLEngine On
	SSLCertificateFile "/usr/local/etc/$service/ssl/$HOST_NAME.crt"
	SSLCertificateKeyFile "/usr/local/etc/$service/ssl/private/$HOST_NAME.key"
${self_signed:+	SSLUseStapling off
#}	SSLCertificateChainFile "/usr/local/etc/$service/ssl/$HOST_NAME.ca.crt"
${OPT_HSTS:+	Header always set Strict-Transport-Security "max-age=$HSTS_DURATION${OPT_HSTSSUBDOM:+; includeSubDomains${OPT_HSTSPRELOAD:+; preload}}"
}${OPT_HPKP:+	${hpkp_commented:+#}Header always set Public-Key-Pins '$hpkp_header_value'
}}	CustomLog "/var/log/httpd-vhost/$HOST_NAME-access.log" common
${OPT_SSL:+	CustomLog "/var/log/httpd-vhost/$HOST_NAME-ssl_request.log" "%t %h %{SSL_PROTOCOL\}x %{SSL_CIPHER\}x \"%r\" %b"
}	ErrorLog "/var/log/httpd-vhost/$HOST_NAME-error.log"
${h2:+	Protocols h2${no_ssl:+c} http/1.1
}${OPT_IMMUTABLE:+	<Location "/$IMMUTABLE_DIR/">
		Options -Indexes
		Header onsuccess set Cache-Control "max-age=31536000, immutable"
	</Location>
}${OPT_GZIP:+	AddOutputFilterByType DEFLATE application/javascript application/xml text/css text/html text/plain
}${OPT_STATIC_GZIP:+	RewriteEngine On
	RewriteCond "%{HTTP:Accept-encoding\}" "\bgzip\b"
	RewriteCond "%{LA-U:REQUEST_FILENAME\}\.gz" -s
	RewriteRule "^/(.*)\.(html?|js|css|te?xt|svg|x[ms]l)\$" "%{CONTEXT_DOCUMENT_ROOT\}/\$1.\$2.gz" [nocase,env=static-gzip:1]
	<If "%{ENV:static-gzip\} -eq 1">
		RewriteRule "\.(?i:html?)\.gz\$" "-" [type=text/html,env=no-gzip:1]
		RewriteRule "\.(?i:js)\.gz\$" "-" [type=application/javascript,env=no-gzip:1]
		RewriteRule "\.(?i:css)\.gz\$" "-" [type=text/css,env=no-gzip:1]
		RewriteRule "\.(?i:te?xt)\.gz\$" "-" [type=text/plain,env=no-gzip:1]
		RewriteRule "\.(?i:svg)\.gz\$" "-" [type=image/svg+xml,env=no-gzip:1]
		RewriteRule "\.(?i:x[ms]l)\.gz\$" "-" [type=application/xml,env=no-gzip:1]
		Header append Content-Encoding gzip
		Header append Vary Accept-Encoding
	</If>
}</VirtualHost>
${OPT_SSL:+<VirtualHost _default_:443>
	ServerName www.$HOST_NAME:443
	SSLEngine On
	SSLCertificateFile "/usr/local/etc/$service/ssl/$HOST_NAME.crt"
	SSLCertificateKeyFile "/usr/local/etc/$service/ssl/private/$HOST_NAME.key"
${self_signed:+	SSLUseStapling off
#}	SSLCertificateChainFile "/usr/local/etc/$service/ssl/$HOST_NAME.ca.crt"
${OPT_HSTS:+	Header always set Strict-Transport-Security "max-age=$HSTS_DURATION${OPT_HSTSSUBDOM:+; includeSubDomains${OPT_HSTSPRELOAD:+; preload}}"
}${OPT_HPKP:+	${hpkp_commented:+#}Header always set Public-Key-Pins '$hpkp_header_value'
}	${loose_app_security:+#}Header always set Content-Security-Policy "frame-ancestors 'none'"
	${loose_app_security:+#}Header always set X-Frame-Options DENY
	Redirect permanent / https://$HOST_NAME/
</VirtualHost>
}<VirtualHost *:80>
	ServerName ${no_ssl:+www.}$HOST_NAME
${OPT_SSL:+	ServerAlias www.$HOST_NAME
}	${loose_app_security:+#}Header always set Content-Security-Policy "frame-ancestors 'none'"
	${loose_app_security:+#}Header always set X-Frame-Options DENY
	Redirect permanent / http${OPT_SSL:+s}://$HOST_NAME/
</VirtualHost>
<Directory "$user_home/$HOST_NAME/www/public">
	Options Indexes FollowSymLinks
	AllowOverride None
	Require all granted
</Directory>
EOF

echo "Configured $HOST_NAME for ${OPT_HSTS:+strict }http${OPT_SSL:+s} service."
