#!/bin/sh
set -e; set -u; set -C

# nuOS 0.0.11.0b0.1 - bin/nu_http_host - LICENSE: MOZ_PUB
#
# Copyright (c) 2008-2017 Chad Jacob Milios and Crop Circle Systems, Inc.
# All rights reserved.
#
# This Source Code Form is subject to the terms of the Mozilla Public License, v2.0.
# If a copy of the MPL was not distributed alongside this file, you can obtain one at
# https://www.mozilla.org/MPL/2.0 . This software project is not affiliated with the
# Mozilla Foundation.
#
# Official updates and community support available at https://nuos.org .
# Other licensing options and professional services available at https://ccsys.com .

NUOS_VER=0.0.11.0b0.1

while getopts C:h:p:su:v OPT; do case $OPT in
	C) CHROOTDIR=$OPTARG;;
	h) HOST_NAME=$OPTARG;;
	p) PROXY_TO=$OPTARG;;
	s) [ -n "${OPT_SSL-}" ] && OPT_STRICT=y || OPT_SSL=y;;
	u) USER_NAME=$OPTARG;;
	v) OPT_VERBOSE=y;;
esac; done; shift $(($OPTIND-1))
[ $# = 0 ]

. "$(dirname "$(realpath "$0")")/../lib/nu_system.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_common.sh"

nuos_init

echo 'host name       -h HOST_NAME      ' ${HOST_NAME:=$HOST}
echo 'user name       -u USER_NAME      ' ${USER_NAME:=$(pw -V "${CHROOTDIR-}/etc" usershow $((`pw -V "${CHROOTDIR-}/etc" usernext | cut -d : -f 1`-1)) | cut -d : -f 1)}
echo -n 'ssl             -s OPT_SSL         ' && [ -n "${OPT_SSL-}" ] && echo set || echo null
echo -n 'hsts (rfc6797) -ss OPT_STRICT      ' && [ -n "${OPT_STRICT-}" ] && echo set || echo null
if [ -n "${OPT_STRICT-}" ]; then
	cat <<EOF
    * ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** *
    ** ** ** ** ** ** ** ** **
     ** ** ** ** ** ** ** ** * WARNING: $HOST_NAME AND ALL SUBDOMAINS
    * ** ** ** ** ** ** ** **           can NEVER EVER go back once you enable
    ** ** ** ** ** ** ** ** **          HSTS even once, even by obliterating
     ** ** ** ** ** ** ** ** *          all servers and starting from scratch.
    * ** ** ** ** ** ** ** **           You darn sure better know what you're
    ** ** ** ** ** ** ** ** **          getting into. Read RFC 6797 for info.
     ** ** ** ** ** ** ** ** *
    * ** ** ** ** ** ** ** **  NOTICE:  Consider registering $HOST_NAME
    ** ** ** ** ** ** ** ** **          at https://hstspreload.appspot.com for
     ** ** ** ** ** ** ** ** *          added first-visit security (inclusion
    * ** ** ** ** ** ** ** **           in built-in lists of participating
    ** ** ** ** ** ** ** ** **          browsers and clients).
     ** ** ** ** ** ** ** ** *
    * ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** *
EOF
fi
echo

maybe_yell

[ -n "${OPT_SSL-}" ] || [ -z "${OPT_STRICT-}" ]

service=apache24

mkdir -p "${CHROOTDIR-}/var/log/httpd-vhost"

user_home=`pw -V "${CHROOTDIR-}/etc" usershow $USER_NAME | cut -d : -f 9`

${CHROOTDIR:+chroot "$CHROOTDIR"} su -m $USER_NAME -c "mkdir -p \"$user_home/$HOST_NAME/www/public\""

if [ -n "${OPT_SSL-}" ]; then
	cp "${CHROOTDIR-}/etc/ssl/certs/$HOST_NAME.crt" "${CHROOTDIR-}/usr/local/etc/$service/ssl/" || cp "${CHROOTDIR-}/etc/ssl/certs/$HOST_NAME.internal.crt" "${CHROOTDIR-}/usr/local/etc/$service/ssl/$HOST_NAME.crt"
	cp "${CHROOTDIR-}/etc/ssl/private/$HOST_NAME.key" "${CHROOTDIR-}/usr/local/etc/$service/ssl/private/"
	if [ -f "${CHROOTDIR-}/etc/ssl/certs/$HOST_NAME.ca.crt" ]; then
		cp "${CHROOTDIR-}/etc/ssl/certs/$HOST_NAME.ca.crt" "${CHROOTDIR-}/usr/local/etc/$service/ssl/"
	else
		self_signed=y
	fi
else
	no_ssl=y
fi

if [ -n "${PROXY_TO-}" ]; then
	PROXY_TO="${PROXY_TO%/}"
	if [ "$PROXY_TO" != "${PROXY_TO#https://}" ]; then
		backend_ssl=y
		PROXY_TO="${PROXY_TO#https://}"
	else
		PROXY_TO="${PROXY_TO#http://}"
	fi
	backend_host="${PROXY_TO%%/*}"
fi

cat > "${CHROOTDIR-}/usr/local/etc/$service/Includes/$HOST_NAME.conf" <<EOF
<VirtualHost ${OPT_SSL:+_default_:443}${no_ssl:+*:80}>
	ServerName $HOST_NAME${OPT_SSL:+:443}
	ServerAdmin webmaster@$HOST_NAME
	DocumentRoot "$user_home/$HOST_NAME/www/public"
	Header always setifempty X-Frame-Options SAMEORIGIN
${PROXY_TO:+	ProxyPass / http${backend_ssl:+s}://$PROXY_TO/
	ProxyPassReverse / http${backend_ssl:+s}://$PROXY_TO/
	ProxyPassReverseCookieDomain $backend_host $HOST_NAME
	ProxyPreserveHost On
}${OPT_SSL:+	SSLEngine On
	SSLCertificateFile "/usr/local/etc/$service/ssl/$HOST_NAME.crt"
	SSLCertificateKeyFile "/usr/local/etc/$service/ssl/private/$HOST_NAME.key"
${self_signed:+	SSLUseStapling off
#}	SSLCertificateChainFile "/usr/local/etc/$service/ssl/$HOST_NAME.ca.crt"
${OPT_STRICT:+	Header always set Strict-Transport-Security "max-age=$((5*365*24*60*60)); includeSubdomains; preload"
}}	CustomLog "/var/log/httpd-vhost/$HOST_NAME-access.log" common
${OPT_SSL:+	CustomLog "/var/log/httpd-vhost/$HOST_NAME-ssl_request.log" "%t %h %{SSL_PROTOCOL\}x %{SSL_CIPHER\}x \"%r\" %b"
}	ErrorLog "/var/log/httpd-vhost/$HOST_NAME-error.log"
</VirtualHost>
${OPT_SSL:+<VirtualHost _default_:443>
	ServerName www.$HOST_NAME:443
	SSLEngine On
	SSLCertificateFile "/usr/local/etc/$service/ssl/$HOST_NAME.crt"
	SSLCertificateKeyFile "/usr/local/etc/$service/ssl/private/$HOST_NAME.key"
${self_signed:+	SSLUseStapling off
#}	SSLCertificateChainFile "/usr/local/etc/$service/ssl/$HOST_NAME.ca.crt"
${OPT_STRICT:+	Header always set Strict-Transport-Security "max-age=$((5*365*24*60*60)); includeSubdomains; preload"
}	Header always setifempty X-Frame-Options SAMEORIGIN
	Redirect permanent / https://$HOST_NAME/
</VirtualHost>
}<VirtualHost *:80>
	ServerName ${no_ssl:+www.}$HOST_NAME
${OPT_SSL:+	ServerAlias www.$HOST_NAME
}	Header always setifempty X-Frame-Options SAMEORIGIN
	Redirect permanent / http${OPT_SSL:+s}://$HOST_NAME/
</VirtualHost>
EOF

cat >> "${CHROOTDIR-}/usr/local/etc/$service/Includes/$HOST_NAME.conf" <<EOF
<Directory "$user_home/$HOST_NAME/www/public">
	Options Indexes FollowSymLinks
	AllowOverride None
	Require all granted
</Directory>
EOF

echo "Configured $HOST_NAME for ${OPT_STRICT:+strict }http${OPT_SSL:+s} service."
