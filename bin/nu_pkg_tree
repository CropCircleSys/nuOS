#!/bin/sh
set -e; set -u; set -C

# nuOS 0.0.9.2a25 - bin/nu_pkg_tree - LICENSE: BSD_SMPL
#
# Copyright (c) 2008-2014 Chad Jacob Milios and Crop Circle Systems, Inc.
# All rights reserved.
#
# This Source Code Form is subject to the terms of the Simplified BSD License.
# If a copy of the Simplified BSD License was not distributed alongside this file, you can
# obtain one at http://www.freebsd.org/copyright/freebsd-license.html . This software
# project is not affiliated with the FreeBSD Project.
#
# Official updates and community support available at http://nuos.org .
# Other licensing options and professional services available at http://ccsys.com .

NUOS_VER=0.0.9.2a25

while getopts Dko:Orv OPT; do case $OPT in
	D) OPT_DEBUG=y;;
	k) OPT_KEEP=y;;
	o) case $OPTARG in
		dot|xml|txt|tbl) out_type=$OPTARG;
			eval setvar file_$out_type \"\$$OPTIND\"; shift $OPTIND;;
		*) exit 22; esac;;
	O) OPT_NOOPTIONS=y;;
	r) OPT_RUNONLY=y;;
	v) OPT_VERBOSE=y;;
esac; done; shift $(($OPTIND-1))

. "$(dirname "$(realpath "$0")")/../lib/nu_system.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_make.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_ports.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_collection.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_common.sh"

nuos_init -q
collection_vars_init

maybe_yell

if [ -n "${OPT_RUNONLY-}" ]; then
	recurse=run
else
	recurse=all
fi
if [ -n "${OPT_NOOPTIONS-}" ]; then
	opt_args="_ _"
else
	opt_args="def_opts my_opts"
fi
for type in dot xml txt tbl; do
	if eval [ -n \"\${file_$type-}\" ]; then
		eval [ ! -e \"\$file_$type\" -o ! -s \"\$file_$type\" ]
		require_tmp tmp_$type
	fi
done
require_tmp -d work_dir
main () {
	local depth=$((${depth--1}+1))
	[ $depth -gt 0 ] || echo $@ > "$work_dir/root"
	mark_as_dependant () {
		local dep_=`echo $dep | tr / _`
		mkdir -p "$work_dir/$dep_/dependants"
		echo $arg >> "$work_dir/$dep_/dependants/$dep_type"
	}
	local arg=
	for arg in $@; do
		local arg_=`echo $arg | tr / _`
		local dep_type=
		if [ ! -d "$work_dir/$arg_/dependencies" ]; then
			mkdir -p "$work_dir/$arg_/dependencies"
			case $arg in
				[^/]*/*)
					local def_opts= my_opts= build_deps= run_deps=
					port_deps $opt_args build_deps run_deps $arg
					local       all_deps=
					sets_union  all_deps  "$build_deps" "$run_deps"
					local          buildonly_deps=
					sets_sym_diff  buildonly_deps  "$all_deps" "$run_deps"
					
					for dep_type in build run all buildonly; do
						eval local dep_file=\"\$${dep_type}_deps\"
						if [ -s "$dep_file" ]; then
							cat "$dep_file" > "$work_dir/$arg_/dependencies/$dep_type"
							local dep=
							for dep in `cat "$dep_file"`; do
								mark_as_dependant
							done
						fi
					done
					retire_tmp build_deps
					retire_tmp buildonly_deps
					if [ -z "${OPT_NOOPTIONS-}" ]; then
						if [ -s "$def_opts" ]; then
							cat "$def_opts" > "$work_dir/$arg_/options"
							local opts_diff=
							require_tmp opts_diff
							diff "$def_opts" "$my_opts" >| "$opts_diff" || true
							if [ -s "$opts_diff" ]; then
								sed -nEe '/^>[[:blank:]]+([^=]+=[^:]*):?.*$/{s//\1/;p;}' "$opts_diff" > "$work_dir/$arg_/settings"
							fi
							retire_tmp opts_diff
						fi
						retire_tmp def_opts
						retire_tmp my_opts
					fi
					eval local recurse_deps=\"\$${recurse}_deps\"
					main `cat "$recurse_deps"`
					retire_tmp run_deps
					retire_tmp all_deps
					;;
				[^/]*)
					eval local deps=\"\$COLL_$arg\"
					dep_type=collection
					echo $deps >> "$work_dir/$arg_/dependencies/$dep_type"
					for dep in $deps; do
						mark_as_dependant
					done
					main $deps
					;;
				*) exit 22
			esac
			echo $arg
			[ -z "${file_txt-}" ] || echo "`printf %${depth}s | tr ' ' '\t'`$arg"  >> "$tmp_txt"
		fi
	done
}
main ${@:-$HOSTOS_PKG_COLLECTION}
retire_tmp ${OPT_KEEP:+-k} work_dir
for type in dot xml txt tbl; do
	if eval [ -n \"\${file_$type-}\" ]; then
		eval cat \"\$tmp_$type\" '>|' \"\$file_$type\"
		retire_tmp tmp_$type
	fi
done

echo
echo "Port dependency mapping complete."
