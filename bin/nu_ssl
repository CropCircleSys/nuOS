#!/bin/sh
set -e; set -u; set -C

# nuOS 0.0.11.0b0.1 - bin/nu_ssl - LICENSE: MOZ_PUB
#
# Copyright (c) 2008-2017 Chad Jacob Milios and Crop Circle Systems, Inc.
# All rights reserved.
#
# This Source Code Form is subject to the terms of the Mozilla Public License, v2.0.
# If a copy of the MPL was not distributed alongside this file, you can obtain one at
# https://www.mozilla.org/MPL/2.0 . This software project is not affiliated with the
# Mozilla Foundation.
#
# Official updates and community support available at https://nuos.org .
# Other licensing options and professional services available at https://ccsys.com .

NUOS_VER=0.0.11.0b0.1

while getopts A:a:b:c:C:d:e:h:l:Lm:n:o:p:stSu:v OPT; do case $OPT in
	A) KNOT_ALTERNATE=$OPTARG;;
	a) AUTH_FILE=$OPTARG;;
	b) KEY_BITS=$OPTARG;;
	c) CERT_FILE=$OPTARG;;
	C) CHROOTDIR=$OPTARG;;
	d) DGST_BITS=$OPTARG;;
	e) EXPIRE_DAYS=$OPTARG;;
	h) SSL_HOST=$OPTARG;;
	l) CITY=$OPTARG;;
	L) OPT_LETS_ENCRYPT=y;;
	m) EMAIL=$OPTARG;;
	n) COUNTRY=$OPTARG;;
	o) COMPANY=$OPTARG;;
	p) STATE=$OPTARG;;
	s) OPT_SELF_SIGNED=y;;
	t) OPT_EXPORT_TLSA=y;;
	S) OPT_UNSECURE=y;;
	u) DEPT=$OPTARG;;
	v) OPT_VERBOSE=y;;
esac; done; shift $(($OPTIND-1))
[ $# = 0 ]

. "$(dirname "$(realpath "$0")")/../lib/nu_system.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_common.sh"

nuos_ssl_init

if [ -n "${OPT_EXPORT_TLSA-}" ]; then
		: ${KEY_BITS:=256}
		case $KEY_BITS in
			256) type=1;;
			512) type=2;;
			*) echo "KEY_BITS must be 256 or 512 when using OPT_EXPORT_TLSA" >&2 && exit 85;;
		esac
		if [ -f "${CHROOTDIR-}/etc/ssl/certs/$SSL_HOST.crt" ]; then
			sufx=crt
			usage=1
		elif [ -f "${CHROOTDIR-}/etc/ssl/certs/$SSL_HOST.internal.crt" ]; then
			sufx=internal.crt
			usage=3
		else
			echo "$0: /etc/ssl/certs/$SSL_HOST.crt: No such file or directory" >&2
			exit 1
		fi
		echo -n "$usage 0 $type "
		$SSL_CMD x509 -in "${CHROOTDIR-}/etc/ssl/certs/$SSL_HOST.$sufx" -outform DER | sha$KEY_BITS
	exit 0
fi

nuos_init

echo 'creating ssl    -h SSL_HOST       ' ${SSL_HOST:=$HOST}
if [ -z "${CERT_FILE-}" -a -z "${OPT_LETS_ENCRYPT-}" ]; then
	echo 'key bits        -b KEY_BITS       ' ${KEY_BITS:=2048}
	echo -n 'digest bits     -d DGST_BITS       ' && [ -n "${OPT_SELF_SIGNED-}" ] && echo ${DGST_BITS:=256} || echo n/a
	echo -n 'valid lifetime  -e EXPIRE_DAYS     ' && [ -n "${OPT_SELF_SIGNED-}" ] && echo ${EXPIRE_DAYS:=365} || echo n/a
	[ -n "$COUNTRY" ] || COUNTRY=XX
	echo 'country code    -n COUNTRY        ' $COUNTRY
	country_len=${#COUNTRY}
	[ $country_len -eq 2 ] || (echo "COUNTRY must be 2 chars (standard: ISO 3166-1 alpha-2)" >&2 && exit 85)
	[ -n "$STATE" ] || STATE=undefined
	echo 'state/province  -p STATE          ' $STATE
	echo 'city/locality   -l CITY           ' ${CITY:=}
	echo 'company/org     -o COMPANY        ' ${COMPANY:=}
	[ -n "$COMPANY" ] || COMPANY=undefined
	echo 'dept/unit       -u DEPT           ' ${DEPT:=}
	if [ -z "${EMAIL-}" ]; then
		if [ ca = "${SSL_HOST%%.*}" -o cert-auth = "${SSL_HOST%%.*}" ]; then
			EMAIL=security@${SSL_HOST#ca.}
		else
			EMAIL=operator@$SSL_HOST
		fi
	fi
	echo 'email           -m EMAIL          ' $EMAIL
	echo -n 'self signed     -s OPT_SELF_SIGNED ' && [ -n "${OPT_SELF_SIGNED-}" ] && echo set || echo null
	echo -n 'unsecure        -S OPT_UNSECURE    ' && [ -n "${OPT_UNSECURE-}" ] && echo set || echo null
elif [ -z "${OPT_LETS_ENCRYPT-}" ]; then
	echo 'cert file       -c CERT_FILE      ' $CERT_FILE
	echo -n 'authority file  -a AUTH_FILE       ' && [ -n "${AUTH_FILE-}" ] && echo $AUTH_FILE || echo undefined
fi
echo

maybe_yell

if [ -n "${OPT_LETS_ENCRYPT-}" ]; then
	[ -n $SSL_HOST ]
	[ -z "${CERT_FILE-}" ]
	[ -z "${AUTH_FILE-}" ]
	service knot onestatus | grep -q 'is running' || (echo "Let's Encrypt service must be run from an operating DNS master." >&2 && exit 85)
	sister nu_ns_host ${CHROOTDIR:+-C "$CHROOTDIR"} ${KNOT_ALTERNATE:+-A $KNOT_ALTERNATE} -h $SSL_HOST -c letsencrypt.org
	sleep 1
	parent_zone=$(ns_master_zone ${CHROOTDIR:+-c} ${KNOT_ALTERNATE:+-A $KNOT_ALTERNATE} $SSL_HOST)
	${CHROOTDIR:+chroot "$CHROOTDIR"} knotc ${KNOT_ALTERNATE:+-c /usr/local/etc/knot/knot_$KNOT_ALTERNATE.conf} zone-reload $parent_zone
	sleep 15
	require_tmp acme_output
	acme.sh --signcsr --csr /etc/ssl/csrs/$SSL_HOST.csr --dns -d $SSL_HOST -d www.$SSL_HOST 2>&1 | sed -n -E -e "/^\\[[^\]+\\] Domain: '([[:alnum:]\\._\\-]+)'$/{s//dom=\\1/;p;};/^\\[[^\]+\\] TXT value: '([[:alnum:]_\\-]+)'$/{s//txt=\\1/;p;}" >| "$acme_output"
	[ 2 = `wc -l < "$acme_output" | xargs` ]
	. "$acme_output"
	retire_tmp acme_output
	[ -n "$dom" -a -n "$txt" ]
	[ "$dom" = "${dom%.$SSL_HOST}.$SSL_HOST" ]
	sister nu_ns_host ${CHROOTDIR:+-C "$CHROOTDIR"} ${KNOT_ALTERNATE:+-A $KNOT_ALTERNATE} -r txt -h $dom -i $txt
	sleep 1
	${CHROOTDIR:+chroot "$CHROOTDIR"} knotc ${KNOT_ALTERNATE:+-c /usr/local/etc/knot/knot_$KNOT_ALTERNATE.conf} zone-reload $parent_zone
	sleep 15
	acme.sh --renew -d $SSL_HOST 2>&1
	CERT_FILE=$HOME/.acme.sh/$SSL_HOST/$SSL_HOST.cer
	AUTH_FILE=$HOME/.acme.sh/$SSL_HOST/fullchain.cer
fi

if [ -z "${CERT_FILE-}" ]; then
	
	if [ ! -d "${CHROOTDIR-}/etc/ssl/private" ]; then
		(umask 77 && mkdir "${CHROOTDIR-}/etc/ssl/private")
	fi
	if [ ! -d "${CHROOTDIR-}/etc/ssl/certs" ]; then
		mkdir "${CHROOTDIR-}/etc/ssl/certs"
	fi
	[ ! -e "${CHROOTDIR-}/etc/ssl/private/$SSL_HOST.key" ] || exit 17
	if [ -z "${OPT_UNSECURE-}" ]; then
		read -p 'keyfile password:' -r key_password
		key_password_len=${#key_password}
		[ $key_password_len -ge 4 ] || (echo "password too short (must be 4 chars or more)" >&2 && exit 85)
		read -p 'repeat password:' -r key_password_repeat
		[ "$key_password" = "$key_password_repeat" ] || (echo "password entered incorrectly" >&2 && exit 85)
		require_tmp key_password_file
		cat >| "$key_password_file" <<EOF
$key_password
EOF
		(umask 77 && $SSL_CMD genrsa -des3 -passout "file:$key_password_file" -out "${CHROOTDIR-}/etc/ssl/private/$SSL_HOST.key" $KEY_BITS)
	else
		(umask 77 && $SSL_CMD genrsa -out "${CHROOTDIR-}/etc/ssl/private/$SSL_HOST.key" $KEY_BITS)
	fi
	
	require_tmp tempfile
	cat >| "$tempfile" <<EOF
$COUNTRY
$STATE
$CITY
$COMPANY
$DEPT
$SSL_HOST
$EMAIL
EOF
	
	if [ -n "${OPT_SELF_SIGNED-}" ]; then
		[ ! -e "${CHROOTDIR-}/etc/ssl/certs/$SSL_HOST.internal.crt" ] || exit 17
		command="$SSL_CMD req -new -x509 -nodes -sha$DGST_BITS -days $EXPIRE_DAYS -key ${CHROOTDIR-}/etc/ssl/private/$SSL_HOST.key -out ${CHROOTDIR-}/etc/ssl/certs/$SSL_HOST.internal.crt"
		message="Generated key $SSL_HOST.key and certificate $SSL_HOST.internal.crt in /etc/ssl/."
	else
		if [ ! -d "${CHROOTDIR-}/etc/ssl/csrs" ]; then
			mkdir "${CHROOTDIR-}/etc/ssl/csrs"
		fi
		[ ! -e "${CHROOTDIR-}/etc/ssl/csrs/$SSL_HOST.csr" ] || exit 17
		(echo && echo) >> "$tempfile"
		command="$SSL_CMD req -new -key ${CHROOTDIR-}/etc/ssl/private/$SSL_HOST.key -reqexts v3_req -out ${CHROOTDIR-}/etc/ssl/csrs/$SSL_HOST.csr"
		message="Generated key $SSL_HOST.key and certificate signing request $SSL_HOST.csr in /etc/ssl/."
	fi
	
	if [ -z "${OPT_UNSECURE-}" ]; then
		$command -passin "file:$key_password_file" < "$tempfile" 2> /dev/null
		rm "$key_password_file"
	else
		$command < "$tempfile" 2> /dev/null
	fi
	rm "$tempfile"
	
	echo $message
	
else
	
	grep -q -- '-BEGIN CERTIFICATE-' "$CERT_FILE"
	grep -q -- '-BEGIN CERTIFICATE-' "$AUTH_FILE"
	[ -e "${CHROOTDIR-}/etc/ssl/private/$SSL_HOST.key" ] || exit 2
	[ ! -e "${CHROOTDIR-}/etc/ssl/certs/$SSL_HOST.crt" ] || exit 17
	[ ! -e "${CHROOTDIR-}/etc/ssl/certs/$SSL_HOST.ca.crt" ] || exit 17
	[ $SSL_HOST = `$SSL_CMD x509 -noout -subject -nameopt sep_multiline -in $CERT_FILE | sed -e '/^    CN=/!d;s/^    CN=//'` ] || exit 85
	cat $CERT_FILE > "${CHROOTDIR-}/etc/ssl/certs/$SSL_HOST.crt"
	echo "Inserted certificate $CERT_FILE as $SSL_HOST.crt in /etc/ssl/certs/."
	if [ -n "${AUTH_FILE-}" ]; then
		$SSL_CMD x509 -noout -in $AUTH_FILE
		cat $AUTH_FILE > "${CHROOTDIR-}/etc/ssl/certs/$SSL_HOST.ca.crt"
		echo "Inserted authority certificate chain $AUTH_FILE as $SSL_HOST.ca.crt in /etc/ssl/certs/."
	fi
	
fi
