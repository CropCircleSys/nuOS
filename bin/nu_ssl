#!/bin/sh
set -e; set -u; set -C

# nuOS 0.0.11.1a1 - bin/nu_ssl - LICENSE: MOZ_PUB
#
# Copyright (c) 2008-2017 Chad Jacob Milios and Crop Circle Systems, Inc.
# All rights reserved.
#
# This Source Code Form is subject to the terms of the Mozilla Public License, v2.0.
# If a copy of the MPL was not distributed alongside this file, you can obtain one at
# https://www.mozilla.org/MPL/2.0 . This software project is not affiliated with the
# Mozilla Foundation.
#
# Official updates and community support available at https://nuos.org .
# Other licensing options and professional services available at https://ccsys.com .

NUOS_VER=0.0.11.1a1

. "$(dirname "$(realpath "$0")")/../lib/nu_system.sh"

while getopts A:a:b:c:C:d:e:fh:kK:l:Lm:Mn:o:p:stT:Su:vW OPT; do case $OPT in
	A) KNOT_ALTERNATE=$OPTARG;;
	a) AUTH_FILE=$OPTARG;;
	b) KEY_BITS=$OPTARG;;
	c) CERT_FILE=$OPTARG;;
	C) CHROOTDIR=$OPTARG;;
	d) DGST_BITS=$OPTARG;;
	e) EXPIRE_DAYS=$OPTARG;;
	f) OPT_FORCE=y;;
	h) SSL_HOST=$OPTARG;;
	k) OPT_EXPORT_HPKP=y;;
	K) NEXT_PUBKEY=$OPTARG;;
	l) CITY=$OPTARG;;
	L) OPT_LETS_ENCRYPT=y;;
	m) EMAIL=$OPTARG;;
	M) OPT_MUST_STAPLE=y;;
	n) COUNTRY=$OPTARG;;
	o) COMPANY=$OPTARG;;
	p) STATE=$OPTARG;;
	s) OPT_SELF_SIGNED=y;;
	S) OPT_UNSECURE=y;;
	t) incr OPT_EXPORT_TLSA 1;;
	T) TLSA_TRANSPORT=$OPTARG;;
	u) DEPT=$OPTARG;;
	v) OPT_VERBOSE=y;;
	W) OPT_EMPTY_SAN_LIST=y;;
esac; done; shift $(($OPTIND-1))
[ $# = 0 ]
: ${SSL_HOST:=$HOST}
[ -n "${OPT_EMPTY_SAN_LIST-}" ] && SAN_LIST= || : ${SAN_LIST:=www.%}

. "$(dirname "$(realpath "$0")")/../lib/nu_common.sh"

nuos_ssl_init

check_ns_server () {
	service knot onestatus | grep -q 'is running' || (echo "Let's Encrypt service must be run from an operating DNS master." >&2 && exit 85)
}

san_init () {
	san=y
	i=1
	SAN_LIST="$(echo $SAN_LIST | sed -e s/%/$SSL_HOST/g)"
	for a in $SSL_HOST $SAN_LIST; do
		san_value="${san_value:+$san_value, }DNS.$i=$a"
		i=$(($i + 1 ))
	done
}

if [ -n "${OPT_EXPORT_TLSA-}" -o -n "${OPT_EXPORT_HPKP-}" ]; then
	: ${KEY_BITS:=256}
	case $KEY_BITS in
		256) type=1;;
		384) [ -z "${OPT_EXPORT_TLSA-}" ] || exit 85;;
		512) type=2;;
		*) exit 85;;
	esac
	if [ -z "${NEXT_PUBKEY-}" -o -n "${OPT_EXPORT_TLSA-}" ]; then
		if [ -f "${CHROOTDIR-}/etc/ssl/certs/$SSL_HOST.crt" ]; then
			sufx=crt
			usage=1
		elif [ -f "${CHROOTDIR-}/etc/ssl/certs/$SSL_HOST.internal.crt" ]; then
			sufx=internal.crt
			usage=3
		else
			echo "$0: /etc/ssl/certs/$SSL_HOST.crt: No such file or directory" >&2
			exit 1
		fi
	fi
	if [ -z "${NEXT_PUBKEY-}" ]; then
		require_tmp pub_key
		$SSL_CMD x509 -in "${CHROOTDIR-}/etc/ssl/certs/$SSL_HOST.$sufx" -noout -pubkey >| "$pub_key"
	else
		if [ "$NEXT_PUBKEY" != "${NEXT_PUBKEY%.crt}" ]; then
			require_tmp pub_key
			$SSL_CMD x509 -in "$NEXT_PUBKEY" -noout -pubkey >| "$pub_key"
		elif [ "$NEXT_PUBKEY" != "${NEXT_PUBKEY%.csr}" ]; then
			require_tmp pub_key
			$SSL_CMD req -in "$NEXT_PUBKEY" -noout -pubkey >| "$pub_key"
		fi
	fi
	key_in="${pub_key:-$NEXT_PUBKEY}"
	$SSL_CMD rsa -pubin -in "$key_in" -noout 2>/dev/null
	if [ -n "${OPT_EXPORT_TLSA-}" ]; then
		selector=1
		san_init
		hash=`$SSL_CMD rsa -pubin -in "$key_in" -outform DER 2>/dev/null | sha$KEY_BITS`
		record_data="$usage $selector $type $hash"
		if [ 2 -le $OPT_EXPORT_TLSA ]; then
			port=${STATE-} # XXX repurpose the (-p)rovince option to mean (-p)ort
			: ${port:=443}
			: ${TLSA_TRANSPORT:=tcp}
			check_ns_server
			for h in $SSL_HOST $SAN_LIST; do
				sister nu_ns_host ${CHROOTDIR:+-C "$CHROOTDIR"} ${KNOT_ALTERNATE:+-A $KNOT_ALTERNATE} -dd -h _$port._$TLSA_TRANSPORT.$h -r tlsa
				sister nu_ns_host ${CHROOTDIR:+-C "$CHROOTDIR"} ${KNOT_ALTERNATE:+-A $KNOT_ALTERNATE} -h _$port._$TLSA_TRANSPORT.$h -r tlsa -s -i "$record_data"
			done
		else
			echo "$record_data"
		fi
	fi
	if [ -n "${OPT_EXPORT_HPKP-}" ]; then
		hash=`$SSL_CMD rsa -pubin -in "$key_in" -outform DER 2>/dev/null | $SSL_CMD dgst -sha$KEY_BITS -binary | $SSL_CMD enc -base64 | tr -d '[[:space:]]'`
		echo pin-sha$KEY_BITS=\"$hash\"
	fi
	if [ -n "${pub_key-}" ]; then
		retire_tmp pub_key
	fi
	exit 0
fi

nuos_init

echo 'creating ssl    -h SSL_HOST       ' $SSL_HOST
if [ -z "${CERT_FILE-}" -a -z "${OPT_LETS_ENCRYPT-}" ]; then
	echo 'key bits        -b KEY_BITS       ' ${KEY_BITS:=2048}
	echo -n 'digest bits     -d DGST_BITS       ' && [ -n "${OPT_SELF_SIGNED-}" ] && echo ${DGST_BITS:=256} || echo n/a
	echo -n 'valid lifetime  -e EXPIRE_DAYS     ' && [ -n "${OPT_SELF_SIGNED-}" ] && echo ${EXPIRE_DAYS:=365} || echo n/a
	[ -n "$COUNTRY" ] || COUNTRY=XX
	echo 'country code    -n COUNTRY        ' $COUNTRY
	country_len=${#COUNTRY}
	[ $country_len -eq 2 ] || (echo "COUNTRY must be 2 chars (standard: ISO 3166-1 alpha-2)" >&2 && exit 85)
	[ -n "$STATE" ] || STATE=undefined
	echo 'state/province  -p STATE          ' $STATE
	echo 'city/locality   -l CITY           ' ${CITY:=}
	echo 'company/org     -o COMPANY        ' ${COMPANY:=}
	[ -n "$COMPANY" ] || COMPANY=undefined
	echo 'dept/unit       -u DEPT           ' ${DEPT:=}
	if [ -z "${EMAIL-}" ]; then
		case ${SSL_HOST%%.*} in
			[Cc][Aa]|[Cc][Ee][Rr][Tt]-[Aa][Uu][Tt][Hh])
				EMAIL=security@${SSL_HOST#${SSL_HOST%%.*}.};;
			*)
				EMAIL=operator@$SSL_HOST;;
		esac
	fi
	echo 'email           -m EMAIL          ' $EMAIL
	echo -n 'self signed     -s OPT_SELF_SIGNED ' && [ -n "${OPT_SELF_SIGNED-}" ] && echo set || echo null
	echo -n 'unsecure        -S OPT_UNSECURE    ' && [ -n "${OPT_UNSECURE-}" ] && echo set || echo null
elif [ -z "${OPT_LETS_ENCRYPT-}" ]; then
	echo 'cert file       -c CERT_FILE      ' $CERT_FILE
	echo -n 'authority file  -a AUTH_FILE       ' && [ -n "${AUTH_FILE-}" ] && echo $AUTH_FILE || echo undefined
fi
echo

maybe_yell

if [ -n "${OPT_LETS_ENCRYPT-}" ]; then
	[ -n $SSL_HOST ]
	[ -z "${CERT_FILE-}" ]
	[ -z "${AUTH_FILE-}" ]
	check_ns_server
	san_init
	for a in $SSL_HOST $SAN_LIST; do
		dom_args="${dom_args:+$dom_args }-d $a"
	done
	sister nu_ns_host ${CHROOTDIR:+-C "$CHROOTDIR"} ${KNOT_ALTERNATE:+-A $KNOT_ALTERNATE} -h $SSL_HOST -c letsencrypt.org
	sleep 1
	parent_zone=$(ns_master_zone ${CHROOTDIR:+-c} ${KNOT_ALTERNATE:+-A $KNOT_ALTERNATE} $SSL_HOST)
	${CHROOTDIR:+chroot "$CHROOTDIR"} knotc ${KNOT_ALTERNATE:+-c /usr/local/etc/knot/knot_$KNOT_ALTERNATE.conf} zone-flush $parent_zone
	sleep 1
	${CHROOTDIR:+chroot "$CHROOTDIR"} knotc ${KNOT_ALTERNATE:+-c /usr/local/etc/knot/knot_$KNOT_ALTERNATE.conf} zone-reload $parent_zone
	echo acme.sh --signcsr --csr /etc/ssl/csrs/$SSL_HOST.csr --dns $dom_args --yes-I-know-dns-manual-mode-enough-go-ahead-please ${OPT_FORCE:+--force}
	sleep 90
	require_tmp acme_output
	acme.sh --signcsr --csr /etc/ssl/csrs/$SSL_HOST.csr --dns $dom_args --yes-I-know-dns-manual-mode-enough-go-ahead-please ${OPT_FORCE:+--force} >| "$acme_output" 2>&1 || true
	require_tmp acme_challenge
	sed -n -E -e "/^\\[[^\]+\\] Domain: '([[:alnum:]\\._\\-]+)'$/{s//\\1/;N;{/\\n\\[[^\]+\\] TXT value: '([[:alnum:]_\\-]+)'$/s// \\1/p;};}" "$acme_output" >| "$acme_challenge"
	#retire_tmp acme_output
	for a in $SSL_HOST $SAN_LIST; do
		h=_acme-challenge.$a
		txt=$(grep "^$h " "$acme_challenge" | cut -w -f 2)
		if [ -n "$txt" ]; then
			sister nu_ns_host ${CHROOTDIR:+-C "$CHROOTDIR"} ${KNOT_ALTERNATE:+-A $KNOT_ALTERNATE} -d -r txt -h $h || true
			sister nu_ns_host ${CHROOTDIR:+-C "$CHROOTDIR"} ${KNOT_ALTERNATE:+-A $KNOT_ALTERNATE} -r txt -h $h -i $txt
			sleep 1
		fi
	done
	${CHROOTDIR:+chroot "$CHROOTDIR"} knotc ${KNOT_ALTERNATE:+-c /usr/local/etc/knot/knot_$KNOT_ALTERNATE.conf} zone-flush $parent_zone
	sleep 1
	${CHROOTDIR:+chroot "$CHROOTDIR"} knotc ${KNOT_ALTERNATE:+-c /usr/local/etc/knot/knot_$KNOT_ALTERNATE.conf} zone-reload $parent_zone
	echo acme.sh --renew $dom_args --yes-I-know-dns-manual-mode-enough-go-ahead-please ${OPT_FORCE:+--force}
	sleep 90
	acme.sh --renew $dom_args --yes-I-know-dns-manual-mode-enough-go-ahead-please ${OPT_FORCE:+--force} 2>&1 || true
	sister nu_ns_host ${CHROOTDIR:+-C "$CHROOTDIR"} ${KNOT_ALTERNATE:+-A $KNOT_ALTERNATE} -h $SSL_HOST -c -d
	CERT_FILE=$HOME/.acme.sh/$SSL_HOST/$SSL_HOST.cer
	AUTH_FILE=$HOME/.acme.sh/$SSL_HOST/ca.cer
	if [ ! -e "$CERT_FILE" -o "${CHROOTDIR-}/etc/ssl/certs/$SSL_HOST.crt" -nt "$CERT_FILE" ]; then
		echo "ERROR: Something went wrong with ACME procedure." >&2
		exit 1
	fi
fi

if [ -z "${CERT_FILE-}" ]; then
	
	if [ ! -d "${CHROOTDIR-}/etc/ssl/private" ]; then
		(umask 77 && mkdir "${CHROOTDIR-}/etc/ssl/private")
	fi
	if [ ! -d "${CHROOTDIR-}/etc/ssl/certs" ]; then
		mkdir "${CHROOTDIR-}/etc/ssl/certs"
	fi
	if [ -e "${CHROOTDIR-}/etc/ssl/private/$SSL_HOST.key" ]; then
		echo "WARNING: Using existing $SSL_HOST.key found in /etc/ssl/private. Any specified options related to generating keys will be ignored." >&2
	else
		if [ -z "${OPT_UNSECURE-}" ]; then
			read -p 'keyfile password:' -r key_password
			key_password_len=${#key_password}
			[ $key_password_len -ge 4 ] || (echo "password too short (must be 4 chars or more)" >&2 && exit 85)
			read -p 'repeat password:' -r key_password_repeat
			[ "$key_password" = "$key_password_repeat" ] || (echo "password entered incorrectly" >&2 && exit 85)
			require_tmp key_password_file
			cat >| "$key_password_file" <<EOF
$key_password
EOF
			(umask 77 && $SSL_CMD genrsa -des3 -passout "file:$key_password_file" -out "${CHROOTDIR-}/etc/ssl/private/$SSL_HOST.key" $KEY_BITS)
		else
			(umask 77 && $SSL_CMD genrsa -out "${CHROOTDIR-}/etc/ssl/private/$SSL_HOST.key" $KEY_BITS)
		fi
	fi
	
	subj_enc () {
		echo "$1" | sed -e 's/ /\\ /g'
	}
	san_init
	subj="/countryName=$COUNTRY/stateOrProvinceName=$(subj_enc "$STATE")/localityName=$(subj_enc "$CITY")/organizationName=$(subj_enc "$COMPANY")/organizationalUnitName=$(subj_enc "$DEPT")/commonName=$SSL_HOST/emailAddress=$EMAIL"
	
	if [ -n "${OPT_SELF_SIGNED-}" ]; then
		sufx=internal.crt
		dir=certs
	else
		ca_signed=y
		sufx=csr
		dir=csrs
	fi

	if [ ! -d "${CHROOTDIR-}/etc/ssl/$dir" ]; then
		mkdir "${CHROOTDIR-}/etc/ssl/$dir"
	fi
	[ ! -e "${CHROOTDIR-}/etc/ssl/$dir/$SSL_HOST.$sufx" ] || mv "${CHROOTDIR-}/etc/ssl/$dir/$SSL_HOST.$sufx" "${CHROOTDIR-}/etc/ssl/$dir/$SSL_HOST.$sufx.bak"
	
	require_tmp ssl_cnf
	sed -e "
		/^\\[ *v3_req *]\$/{
${ca_signed:+${OPT_MUST_STAPLE:+			a\\
1.3.6.1.5.5.7.1.24 = DER:30:03:02:01:05
}}			a\\
subjectAltName = @alt_names
		}
" $SSL_CONF >| "$ssl_cnf"
	
	echo '[alt_names]' >> "$ssl_cnf"
	i=1
	for a in $SSL_HOST $SAN_LIST; do
		echo "DNS.$i = $a" >> "$ssl_cnf"
		i=$(($i + 1 ))
	done
	
	$SSL_CMD req \
		-config "$ssl_cnf" \
		-new \
		-subj "$subj" \
		-key "${CHROOTDIR-}/etc/ssl/private/$SSL_HOST.key" \
		${key_password_file:+-passin "file:$key_password_file"} \
		${OPT_SELF_SIGNED:+-x509 -nodes -sha$DGST_BITS -days $EXPIRE_DAYS} \
		-reqexts v3_req \
		-out "${CHROOTDIR-}/etc/ssl/${OPT_SELF_SIGNED:+certs}${ca_signed:+csrs}/$SSL_HOST.${OPT_SELF_SIGNED:+internal.crt}${ca_signed:+csr}"
	if [ -n "${key_password_file-}" ]; then
		rm "$key_password_file"
	fi
	#retire_tmp ssl_cnf
	
	echo "Generated key $SSL_HOST.key and certificate${ca_signed:+ signing request} $SSL_HOST.$sufx in /etc/ssl/."
	
else
	
	grep -q -- '-BEGIN CERTIFICATE-' "$CERT_FILE"
	grep -q -- '-BEGIN CERTIFICATE-' "$AUTH_FILE"
	[ -e "${CHROOTDIR-}/etc/ssl/private/$SSL_HOST.key" ] || exit 2
	for x in crt ca.crt; do
		if [ -n "${OPT_FORCE-}" ] && [ -e "${CHROOTDIR-}/etc/ssl/certs/$SSL_HOST.$x" ]; then
			mv "${CHROOTDIR-}/etc/ssl/certs/$SSL_HOST.$x" "${CHROOTDIR-}/etc/ssl/certs/$SSL_HOST.$x.bak"
		fi
		[ ! -e "${CHROOTDIR-}/etc/ssl/certs/$SSL_HOST.$x" ] || exit 17
	done
	[ $SSL_HOST = `$SSL_CMD x509 -noout -subject -nameopt sep_multiline -in $CERT_FILE | sed -ne '/^    CN=/s///p'` ] || exit 85
	cat $CERT_FILE > "${CHROOTDIR-}/etc/ssl/certs/$SSL_HOST.crt"
	echo "Inserted certificate $CERT_FILE as $SSL_HOST.crt in /etc/ssl/certs/."
	if [ -n "${AUTH_FILE-}" ]; then
		$SSL_CMD x509 -noout -in $AUTH_FILE
		cat $AUTH_FILE > "${CHROOTDIR-}/etc/ssl/certs/$SSL_HOST.ca.crt"
		echo "Inserted authority certificate chain $AUTH_FILE as $SSL_HOST.ca.crt in /etc/ssl/certs/."
	fi
	
fi
