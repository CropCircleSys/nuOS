#!/bin/sh
set -e; set -u; set -C

# nuOS 0.0.9.2d12 - bin/nu_install - LICENSE: BSD_SMPL
#
# Copyright (c) 2008-2013 Chad Jacob Milios and Crop Circle Systems, Inc.
# All rights reserved.
#
# This Source Code Form is subject to the terms of the Simplified BSD License.
# If a copy of the Simplified BSD License was not distributed alongside this file, you can
# obtain one at http://www.freebsd.org/copyright/freebsd-license.html . This software
# project is not affiliated with the FreeBSD Project.
#
# Official updates and community support available at http://nuos.org .
# Other licensing options and professional services available at http://ccsys.com .

NUOS_VER=0.0.9.2d12

while getopts a:b:c:Bd:DeFh:i:kl:m:o:p:PqQs:St:u:vzZ OPT; do
	case $OPT in
		a)
			ADMIN_ACCT="$OPTARG"
			;;
		b)
			BD_ACCT="$OPTARG"
			;;
		B)
			OPT_NOBRAND=y
			;;
		c)
			PKG_COLLECTION="$OPTARG"
			;;
		d) # must be set unless (-S)wap is used
			POOL_DEVS="$OPTARG"
			;;
		D) # nuOS developer's shortcut: -DD
			if [ -n "${OPT_DEBUG-}" ]; then
				COPY_PORTS=y
				COPY_DEV_PKGS=y
				COPY_SRC=y
				COPY_SVN=y
			fi
			OPT_DEBUG=y
			;;
		e)
			OPT_ELI=y
			;;
		f) # unused reserved
			OPT_FORCE_INSTALL=y
			;;
		F)
			OPT_FORCE_BUILD=y
			;;
		h)
			NEW_HOST="$OPTARG"
			;;
		i)
			INJECT_CACHE="$OPTARG"
			;;
		k)
			OPT_INSTALL_ADMIN_KEYS=y
			;;
		l)
			LOCAL_SCRIPT="$OPTARG"
			;;
		m)
			POOL_MNT="$OPTARG"
			;;
		o)
			POOL_OPTS="$OPTARG"
			;;
		p)
			POOL_NAME="$OPTARG"
			;;
		P)
			OPT_DONT_PRESERVE_DIST_SNAP=y
			;;
		q)
			OPT_QUICK=y
			;;
		s) # this is the reservation for swap on the pool
			SWAP_SIZE="$OPTARG"
			;;
		S) # this installs into 8 memory devices so have a ton of free RAM if you use this
			OPT_SWAP=y
			;;
		t) # raidz (default), raidz2, raidz3, mirror or ''
			POOL_TYPE="$OPTARG"
			;;
		u)
			USER_ACCT="$OPTARG"
			;;
		v)
			[ -n "${OPT_VERBOSE-}" ] && export OPT_VERBOSE
			OPT_VERBOSE=y
			;;
		z)
			OPT_SKIP_INIT_ZPOOL=y
			;;
		Z)
			OPT_ONLY_INIT_ZPOOL=y
			;;
		*)
			echo "usage: `basename $0` [-BeFkPqSvzZ] [-a admin-acct] [-b backdoor-acct] [-u user-acct] [-c pkg-collection] [-h new-host] [-s swap-size] [-d pool-devs] [-l local-script] [-m pool-mnt] [-o pool-opts] [-p pool-name] [-t pool-type]" >&2
			exit 1
	esac
done

. "$(dirname "$(realpath "$0")")/../lib/nu_system.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_common.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_admin.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_install.sh"

baseos_init
nuos_init
install_vars_init
admin_init

maybe_pause
maybe_yell

if [ -z "${OPT_SKIP_INIT_ZPOOL-}" ]; then
	i=0
	for dev in $POOL_DEVS; do
		gpart create -s GPT /dev/$dev
		gpart add -a 8 -t freebsd-boot -s 128 /dev/$dev
		gpart add -a 8 -t freebsd-zfs -l $POOL_NAME$i /dev/$dev
		gpart set -a bootme -i 2 /dev/$dev
		gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 /dev/$dev
		gnop create -S 4096 /dev/gpt/$POOL_NAME$i
		nextdev="/dev/gpt/$POOL_NAME$i.nop"
		push devlist $nextdev
		i=$(($i + 1))
	done
	require_tmp -d tempdir
	zpool create -o altroot=$POOL_MNT -o "cachefile=$tempdir/zpool.cache" -O mountpoint=none -O canmount=off -O devices=off $POOL_OPTS $POOL_NAME $POOL_TYPE $devlist
	zpool_id=`zpool get guid $POOL_NAME | grep -E "^$POOL_NAME[[:blank:]]+guid\>" | cut -w -f 3`
	zpool export $POOL_NAME
	gnop destroy $devlist
	zpool import -o altroot=$POOL_MNT -o "cachefile=$tempdir/zpool.cache" $zpool_id
fi
if [ -n "${OPT_ONLY_INIT_ZPOOL-}" ]; then
	[ -z "${OPT_SKIP_INIT_ZPOOL-}" ]
	exit
fi

if [ -n "${OPT_FORCE_BUILD-}" \
	-o "${POOL_BASEOS_TYPE-}" != $BASEOS_TYPE \
	-o "${POOL_BASEOS_VER-}" != $BASEOS_VER \
	-o "${POOL_HOSTOS_TYPE-}" != nuOS \
	-o "${POOL_HOSTOS_VER-}" != $NUOS_VER \
	-o "${HOSTOS_NOBRAND-}" != "${OPT_NOBRAND-}" \
]; then
	must_build=y
	require_base_src
	
	zfs create -o mountpoint=none -o canmount=off $POOL_NAME/os
	zfs create -o mountpoint=none -o canmount=off $POOL_NAME/os/$BASEOS_TYPE
	zfs create -o mountpoint=/ -o canmount=noauto $POOL_NAME/os/$BASEOS_TYPE/$BASEOS_VER
	zfs mount $POOL_NAME/os/$BASEOS_TYPE/$BASEOS_VER
	zfs create $POOL_NAME/os/$BASEOS_TYPE/$BASEOS_VER/etc
	zfs create $POOL_NAME/os/$BASEOS_TYPE/$BASEOS_VER/var
	zfs create $POOL_NAME/os/$BASEOS_TYPE/$BASEOS_VER/var/db
	
	(cd /usr/src && make -D WITHOUT_KERNEL_SYMBOLS DESTDIR=$POOL_MNT KERNCONF=$TRGT_KERN installkernel installworld distribution)
	:> $POOL_MNT/etc/fstab
	
	zfs snapshot -r $POOL_NAME/os/$BASEOS_TYPE/$BASEOS_VER@dist
	
	cat > $POOL_MNT/boot/loader.conf <<'EOF'
zfs_load="YES"
EOF
	
	cat > $POOL_MNT/etc/rc.conf <<'EOF'
zfs_enable="YES"
EOF
	
	zfs snapshot -r $POOL_NAME/os/$BASEOS_TYPE/$BASEOS_VER@blank

	(cd $POOL_MNT && mkdir -p compat/linux/proc compat/linux/sys etc/local usr/ports/packages)
	ln -s ../../etc/local $POOL_MNT/usr/local/etc
	
	cat >> $POOL_MNT/etc/fstab <<'EOF'
tmp /tmp tmpfs rw 0 0
fdesc /dev/fd fdescfs rw 0 0
proc /proc procfs rw 0 0
EOF

	zfs snapshot -r $POOL_NAME/os/$BASEOS_TYPE/$BASEOS_VER@bare
	
	zfs set mountpoint=none $POOL_NAME/os/$BASEOS_TYPE/$BASEOS_VER
	zfs set canmount=off $POOL_NAME/os/$BASEOS_TYPE/$BASEOS_VER
	
	zfs create -o mountpoint=none -o canmount=off $POOL_NAME/os/nuOS
	zfs clone -o mountpoint=/ -o canmount=noauto $POOL_NAME/os/$BASEOS_TYPE/$BASEOS_VER@bare $POOL_NAME/os/nuOS/$NUOS_VER
	zfs clone $POOL_NAME/os/$BASEOS_TYPE/$BASEOS_VER/etc@bare $POOL_NAME/os/nuOS/$NUOS_VER/etc
	zfs clone $POOL_NAME/os/$BASEOS_TYPE/$BASEOS_VER/var@bare $POOL_NAME/os/nuOS/$NUOS_VER/var
	zfs clone $POOL_NAME/os/$BASEOS_TYPE/$BASEOS_VER/var/db@bare $POOL_NAME/os/nuOS/$NUOS_VER/var/db
	
	cat >> $POOL_MNT/etc/fstab <<'EOF'
#linproc /compat/linux/proc linprocfs rw 0 0
#linsys /compat/linux/sys linsysfs rw 0 0
EOF
	
	cat >> $POOL_MNT/boot/loader.conf <<'EOF'
autoboot_delay="3"
aesni_load="YES"
ipfw_load="YES"
#linux_load="YES"
sem_load="YES"
accf_data_load="YES"
accf_dns_load="YES"
accf_http_load="YES"
kern.maxfiles="32768"
kern.ipc.shmmni="1024"
kern.ipc.shmseg="1024"
vfs.zfs.l2arc_write_max="83886080"
vfs.zfs.l2arc_write_boost="83886080"
vfs.zfs.l2arc_headroom="8"
vfs.zfs.l2arc_norw="0"
EOF
	
	cat >> $POOL_MNT/etc/rc.conf <<'EOF'
#linux_enable="YES"
entropy_file="/var/db/entropy/seed"
geli_swap_flags="-e aes-cbc -l 256 -s 4096 -d"
firewall_enable="YES"
firewall_type="open"
firewall_nat_flags="same_ports reset"
firewall_nat_interface="net0"
devfs_load_rulesets="YES"
sendmail_submit_enable="NO"
sendmail_outbound_enable="NO"
sendmail_msp_queue_enable="NO"
EOF
	
	cat > $POOL_MNT/etc/rc.d/nuos_zpool <<'EOF'
#!/bin/sh

# PROVIDE: nuos_zpool
# REQUIRE: zfs var
# BEFORE: cleanvar
# KEYWORD: nojail

. /etc/rc.subr

name=nuos_zpool
rcvar=${name}_enable
start_cmd=${name}_start
stop_cmd=:

: ${nuos_zpool_enable=NO}

nuos_zpool_start () {
	if checkyesno nuos_zpool_enable && [ -n "$nuos_zpool_list" ]; then
		for _pool in $nuos_zpool_list; do
			if ! zpool list $_pool > /dev/null 2>&1; then
				zpool import $_pool
			fi
		done
	fi
}

load_rc_config $name
run_rc_command "$1"
EOF
	chmod +x $POOL_MNT/etc/rc.d/nuos_zpool

	cat > $POOL_MNT/etc/rc.d/nuos_pvt_init <<'EOF'
#!/bin/sh

# PROVIDE: nuos_pvt_init
# REQUIRE: initrandom
# BEFORE: disks
# KEYWORD: nojail

. /etc/rc.subr

name=nuos_pvt_init
rcvar=${name}_enable
start_cmd=${name}_start
stop_cmd=:

: ${nuos_pvt_init_enable:=NO}
: ${nuos_pvt_init_delay:=300}

nuos_pvt_init_start () {
	if checkyesno nuos_pvt_init_enable; then
		local mountfrom=`kenv vfs.root.mountfrom`
		local root_ds=${mountfrom#zfs:}
		local pool=${root_ds%%/*}
		if zfs list $pool/private > /dev/null 2>&1; then
			echo Waiting $nuos_pvt_init_delay seconds for private key for storage pool $pool...
			tick=0
			until [ -e /dev/gpt/$pool-key -o $tick -gt $nuos_pvt_init_delay ]; do
				sleep 1
				tick=$(($tick+1))
			done
			if [ -e /dev/gpt/$pool-key ]; then
EOF
	blank_key_gpt_type=deadbeef-4657-11e3-9570-002590742cc4
	cat >> $POOL_MNT/etc/rc.d/nuos_pvt_init <<EOF
				local blank_key_type=$blank_key_gpt_type
EOF
	cat >> $POOL_MNT/etc/rc.d/nuos_pvt_init <<'EOF'
				local pvt_key_type=bee31337-4657-11e3-9570-002590742cc4
				local key_part=`glabel status -s | grep -E "^[[:blank:]]*gpt/$pool-key\>" | xargs -L1 | cut -w -f 3`
				local key_dev=`gpart status -s | grep -E "^[[:blank:]]*$key_part\>" | xargs -L1 | cut -w -f 3`
				local blank_key_part_idx=`gpart show -r $key_dev | sed -nEe "/^(=>)?[[:blank:]]*[[:digit:]]+[[:blank:]]+[[:digit:]]+[[:blank:]]+([[:digit:]]+)[[:blank:]]+$blank_key_type[[:>:]].*\$/{s//\2/;p;}"`
				if [ -n "$blank_key_part_idx" ]; then
					if gpart modify -i $blank_key_part_idx -t !$pvt_key_type $key_dev; then
						dd if=/dev/random of=/dev/gpt/$pool-key bs=512 count=1
						geli init -l 256 -s 4096 -K /dev/gpt/$pool-key -P -B none zvol/$pool/private
						geli attach -k /dev/gpt/$pool-key -p zvol/$pool/private
						zpool create -o autoexpand=on -O mountpoint=none -O canmount=off -O devices=off $nuos_pvt_init_opts $pool-pvt zvol/$pool/private.eli
						zfs create $pool-pvt/sys
						zfs create $pool-pvt/sys/host
						zfs create -o mountpoint=/etc/ssl/private $pool-pvt/sys/host/ssl
						chmod go-rx /etc/ssl/private
						zfs create -o mountpoint=/etc/ssh/private $pool-pvt/sys/host/ssh
						chmod go-rx /etc/ssh/private
						zpool export $pool-pvt
						geli detach zvol/$pool/private.eli
					fi
				fi
			else
				echo Giving up.
			fi
		fi
	fi
}

load_rc_config $name
run_rc_command "$1"
EOF
	chmod +x $POOL_MNT/etc/rc.d/nuos_pvt_init
	
	cat > $POOL_MNT/etc/rc.conf.local <<'EOF'
#ifconfig_%%INTERFACE%%_name="net0"
#ifconfig_net0="DHCP"
#gateway_enable="YES"
#firewall_nat_enable="YES"
EOF
	
	cat >> $POOL_MNT/etc/sysctl.conf <<'EOF'
net.inet.ip.fw.one_pass=0
EOF
	
	cat > $POOL_MNT/etc/periodic.conf <<'EOF'
daily_output="/var/log/daily.log"
weekly_output="/var/log/weekly.log"
monthly_output="/var/log/monthly.log"
daily_status_security_inline="YES"
daily_show_success="NO"
weekly_show_success="NO"
monthly_show_success="NO"
daily_status_security_chksetuid_enable="NO"
daily_status_security_neggrpperm_enable="NO"
daily_clean_hoststat_enable="NO"
daily_status_mail_rejects_enable="NO"
daily_status_include_submit_mailq="NO"
daily_submit_queuerun="NO"
weekly_locate_enable="NO"
weekly_whatis_enable="NO"
EOF
	
	cat >> $POOL_MNT/etc/ssh/sshd_config <<'EOF'
UseDNS no
EOF
	
	cat > $POOL_MNT/etc/jail.conf <<'EOF'
$tmpfs_args = "-o size=1073741824";
path = "/var/jail/$name";
host.hostname = "$name.jail";
devfs_ruleset = 4;
exec.clean;
exec.prestart = "mount -t devfs dev $path/dev && devfs -m $path/dev rule -s $devfs_ruleset applyset && ln -sf /var/run/log $path/dev/log";
exec.prestart += "mount -t fdescfs fdesc $path/dev/fd";
exec.prestart += "mount -t tmpfs $tmpfs_args tmp $path/tmp";
exec.prestart += "mount -t procfs proc $path/proc";
exec.start = "/bin/sh /etc/rc";
exec.stop = "/bin/sh /etc/rc.shutdown";
exec.poststop = "umount $path/proc";
exec.poststop += "umount $path/tmp";
exec.poststop += "umount $path/dev/fd";
exec.poststop += "umount $path/dev";
enforce_statfs = 1;
interface = "lo0";
ip_hostname;
allow.chflags;
allow.quotas;
children.max = 256;
EOF
	
	prepare_make_conf -i make_conf cmd_to_retire_make_conf
	cat "$make_conf" > $POOL_MNT/etc/make.conf
	$cmd_to_retire_make_conf "$make_conf"
	
	cat >> $POOL_MNT/boot/loader.conf <<'EOF'
init_script="/boot/init.sh"
EOF
	
	cat > $POOL_MNT/boot/init.sh <<'EOF'
#!/bin/sh
PATH=/sbin:/bin:/usr/sbin:/usr/bin
mountfrom=`kenv vfs.root.mountfrom`
root_ds=${mountfrom#zfs:}
pool=${root_ds%%/*}
zfs list -H -r -o name,type $pool/swap | while read swap_ds ds_type; do
	case $ds_type in volume)
		zfs rollback -r $swap_ds@blank
	esac
done
zfs mount $root_ds/etc
EOF
	
	
	if [ -z "${OPT_NOBRAND-}" ]; then
		
		baseos_type_lc=`echo "$BASEOS_TYPE" | tr '[:upper:]' '[:lower:]'`
		baseos_info_url="http://$baseos_type_lc.org"
		
		mv -n $POOL_MNT/etc/motd $POOL_MNT/etc/motd.$baseos_type_lc
		head -n 1 $POOL_MNT/etc/motd.$baseos_type_lc > $POOL_MNT/etc/motd
		cat >> $POOL_MNT/etc/motd <<EOF
nuOS $NUOS_VER

Thank you for choosing nuOS. Welcome!

Official updates and community support available at http://nuos.org .

This is the $BASEOS_TYPE edition of nuOS, extending $BASEOS_TYPE $BASEOS_VER. More
information about $BASEOS_TYPE is available at $baseos_info_url .

Your contributions are greatly appreciated and allow nuOS to thrive.

Edit /etc/motd to change this login announcement.

EOF
		
		nuos_supported_len=${#NUOS_SUPPORTED}
		[ $nuos_supported_len -le 23 ]
		nuos_supported_23_chrs=`echo "$NUOS_SUPPORTED" | awk '{printf "%-23s", $1}'`
		
# 		patch -b '' $POOL_MNT/boot/beastie.4th <<EOF
# 174a175,197
# > : nuosbw-logo ( x y -- ) \\ B/W nuOS spam (21 rows x 33ish columns)
# > 
# > 	2dup at-xy ."      Copyright (c) 2008-2013" 1+
# > 	2dup at-xy ." " 1+
# > 	2dup at-xy ."   $BASEOS_TYPE Edition (a.k.a. nuBSD)" 1+
# > 	2dup at-xy ."   extends $BASEOS_TYPE $BASEOS_VER" 1+
# > 	2dup at-xy ." " 1+
# > 	2dup at-xy ."   Official updates and community" 1+
# > 	2dup at-xy ."        support available at" 1+
# > 	2dup at-xy ."         http://nuos.org ." 1+
# > 	2dup at-xy ." " 1+
# > 	2dup at-xy ."    Other licensing options and" 1+
# > 	2dup at-xy ."  professional services available" 1+
# > 	2dup at-xy ." from Crop Circle Systems, Inc. at" 1+
# > 	2dup at-xy ."         http://ccsys.com ." 1+
# > 	2dup at-xy ." " 1+
# > 	2dup at-xy ."   More information about $BASEOS_TYPE" 1+
# > 	     at-xy ." available at $baseos_info_url ."
# > 
# > 	\\ Put the cursor back at the bottom
# > 	0 25 at-xy
# > ;
# > 
# 186a210
# > \\ 	nuosbw      B/W nuOS spam (21 rows x 33ish columns)
# 233a258,261
# > 	2dup s" nuosbw" compare-insensitive 0= if
# > 		logoX @ logoY @ nuosbw-logo
# > 		2drop exit
# > 	then
# EOF
# 		
# 		patch -b '' $POOL_MNT/boot/brand.4th <<EOF
# 49a50,63
# > : nuos-logo ( x y -- ) \\ "nuOS" logo in B/W (7 rows x 38 columns)
# > 
# > 	2dup at-xy ." nuOS $NUOS_VER" 1+
# > 	2dup at-xy ." $nuos_supported_23_chrs _____   _____" 1+
# > 	2dup at-xy ."        ______  _     _ / ___ \\ / ____|" 1+
# > 	2dup at-xy ."       |  ___ \\| |   | | |   | | (___" 1+
# > 	2dup at-xy ."       | |   | | |   | | |   | |\\___ \\" 1+
# > 	2dup at-xy ."       | |   | | |___| | |___| |____) |" 1+
# > 	     at-xy ."       |_|   |_|\\______|\\_____/|_____/"
# > 
# > 	\\ Put the cursor back at the bottom
# > 	0 25 at-xy
# > ;
# > 
# 57a72
# > \\ 	nuos        nuOS banner
# 89a105,109
# > 	2dup s" nuos" compare-insensitive 0= if
# > 		brandX @ brandY @ nuos-logo
# > 		2drop exit
# > 	then
# > 
# EOF
# 		
# 		patch -b '' $POOL_MNT/boot/menu.4th <<'EOF'
# 420c420
# < 		drop s" Welcome to FreeBSD"
# ---
# > 		drop s" Welcome to nuOS"
# EOF
# 		
# 		cat >> $POOL_MNT/boot/loader.conf <<'EOF'
# loader_brand="nuos"
# loader_logo="nuosbw"
# EOF
		
		mkdir $POOL_MNT/usr/nuos
		tar -cf - -C "$(dirname "$(realpath "$0")")/.." --exclude ^conf --exclude '.?*' . | tar -xvf - -C $POOL_MNT/usr/nuos
		chown -R root:wheel $POOL_MNT/usr/nuos
		conf=usr/nuos/conf
		
	else
		conf=etc/nuos.conf
		echo HOSTOS_NOBRAND=y > $POOL_MNT/$conf
	fi
	
	cat >> $POOL_MNT/$conf <<EOF
HOSTOS_TYPE=nuOS
HOSTOS_VER=$NUOS_VER
HOSTOS_PKG_COLLECTION=$PKG_COLLECTION
PARENT=`whoami`@`hostname`
PARENT_HOSTOS_TYPE=$HOSTOS_TYPE
PARENT_HOSTOS_VER=$HOSTOS_VER
PARENT_BASEOS_TYPE=`uname -s`
PARENT_BASEOS_VER=`uname -r`
PARENT_KERN=`uname -v | awk '{print $NF}'`
POOL_BASEOS_TYPE=$BASEOS_TYPE
POOL_BASEOS_VER=$BASEOS_VER
POOL_HOSTOS_TYPE=nuOS
POOL_HOSTOS_VER=$NUOS_VER
HOSTOS_ARCH=$TRGT_ARCH
HOSTOS_PROC=$TRGT_PROC
HOSTOS_KERN=$TRGT_KERN
HOSTOS_OPTZ=$TRGT_OPTZ
EOF
		
	zfs snapshot -r $POOL_NAME/os/nuOS/$NUOS_VER@blank
	if [ $PKG_COLLECTION != blank ]; then
		
		sister nu_install_pkg -C $POOL_MNT sysutils/memtest86+
		
# 		patch -b '' $POOL_MNT/boot/menu-commands.4th <<'EOF'
# 190a191,196
# > 
# > : memtest-boot ( -- )
# >         s" unload" evaluate
# >         s" load /boot/opt/memtest86+" evaluate
# >         s" boot" evaluate
# > ;
# EOF
# 		
# 		patch -b '' $POOL_MNT/boot/menu.rc <<'EOF'
# 69a70,76
# > set menu_caption[8]="MemTest86+ RAM test"
# > \ set menu_caption[8]="Mem[T]est86+ RAM test"
# > set menu_command[8]="memtest-boot"
# > \ set menu_keycode[8]="114"
# > set ansi_caption[8]="MemTest86+ RAM test"
# > \ set ansi_caption[8]="Mem[1mT[37mest86+ RAM test"
# > 
# EOF
		
		sister nu_install_pkg -C $POOL_MNT sysutils/jail2
		zfs snapshot -r $POOL_NAME/os/nuOS/$NUOS_VER@bare
		if [ $PKG_COLLECTION != bare ]; then
			sister nu_install_pkg -C $POOL_MNT sysutils/screen misc/buffer sysutils/pipemeter archivers/lzop sysutils/smartmontools net/rsync
			zfs snapshot -r $POOL_NAME/os/nuOS/$NUOS_VER@lite
			if [ $PKG_COLLECTION != lite ]; then
				sister nu_install_pkg -C $POOL_MNT devel/subversion devel/git ports-mgmt/portupgrade
				zfs snapshot -r $POOL_NAME/os/nuOS/$NUOS_VER@developer
				if [ $PKG_COLLECTION != developer ]; then
					sister nu_install_pkg -C $POOL_MNT -y mail/postfix
					sister nu_install_pkg -C $POOL_MNT sysutils/pefs-kmod security/gnupg dns/djbdns security/openvpn ftp/pure-ftpd net/netatalk3 net/samba36 net-p2p/rtorrent net-p2p/bitcoin www/py-rhodecode databases/postgresql92-server databases/mongodb databases/redis www/npm www/apache24 mail/cyrus-imapd24 security/cyrus-sasl2-saslauthd emulators/virtualbox-ose graphics/povray-meta graphics/graphviz x11-fonts/webfonts print/teTeX lang/php55-extensions mail/roundcube-sieverules
					zfs snapshot -r $POOL_NAME/os/nuOS/$NUOS_VER@server
					if [ $PKG_COLLECTION != server ]; then
						sister nu_install_pkg -C $POOL_MNT graphics/gimp x11/xorg x11/kde4 net/x11vnc net/tightvnc www/firefox mail/thunderbird editors/libreoffice multimedia/vlc
						sister enable_svc -C $POOL_MNT hald kdm4
						zfs snapshot -r $POOL_NAME/os/nuOS/$NUOS_VER@desktop
					fi
				fi
			fi
		fi
	fi
	
else
	zfs send -R $POOL_BOOT_NAME/os/$BASEOS_TYPE/$BASEOS_VER@bare | zfs receive -vd $POOL_NAME
	zfs set mountpoint=none $POOL_NAME/os
	zfs set canmount=off $POOL_NAME/os
	zfs set mountpoint=none $POOL_NAME/os/$BASEOS_TYPE
	zfs set canmount=off $POOL_NAME/os/$BASEOS_TYPE
	zfs send -R $POOL_BOOT_NAME/os/nuOS/$NUOS_VER@$PKG_COLLECTION | zfs receive -vd $POOL_NAME
	zfs set canmount=off $POOL_NAME/os/nuOS
fi

zfs snapshot -r $POOL_NAME/os/nuOS/$NUOS_VER@base

zfs create -o mountpoint=none -o canmount=off $POOL_NAME/os/$BASEOS_TYPE/src
zfs create -o mountpoint=none -o canmount=off $POOL_NAME/os/$BASEOS_TYPE/src/obj
zfs create -o mountpoint=/usr/src $POOL_NAME/os/$BASEOS_TYPE/src/$BASEOS_VER
zfs create -o mountpoint=/usr/obj $POOL_NAME/os/$BASEOS_TYPE/src/obj/$BASEOS_VER
if [ -n "${COPY_SRC-}" ]; then
	if [ -z "${OPT_FORCE_BUILD-}" -a -n "${POOL_BOOT_NAME-}" ] \
		&& zfs list $POOL_BOOT_NAME/os/$BASEOS_TYPE/src/$BASEOS_VER@dist \
		&& [ -n "${COPY_SVN-}" -a -d /usr/src/.zfs/snapshot/dist/.svn ] \
			|| [ -z "${COPY_SVN-}" -a ! -d /usr/src/.zfs/snapshot/dist/.svn ]
	then
		zfs send $POOL_BOOT_NAME/os/$BASEOS_TYPE/src/$BASEOS_VER@dist | zfs receive -vFd $POOL_NAME
		if [ -n "${OPT_DONT_PRESERVE_DIST_SNAP-}" ]; then
			zfs destroy $POOL_NAME/os/$BASEOS_TYPE/src/$BASEOS_VER@dist
		fi
	else
		if [ -z "${COPY_SVN-}" ]; then
			exclude_svn=y
		fi
		tar -cpf - -C /usr ${exclude_svn:+--exclude src/.svn} src | tar -xpvf - -C $POOL_MNT/usr
		if [ -z "${OPT_DONT_PRESERVE_DIST_SNAP-}" ]; then
			zfs snapshot $POOL_NAME/os/$BASEOS_TYPE/src/$BASEOS_VER@dist
		fi
	fi
	if [ -z "${OPT_FORCE_BUILD-}" -a -n "${POOL_BOOT_NAME-}" ] \
		&& zfs list $POOL_BOOT_NAME/os/$BASEOS_TYPE/src/obj/$BASEOS_VER@dist
	then
		zfs send $POOL_BOOT_NAME/os/$BASEOS_TYPE/src/obj/$BASEOS_VER@dist | zfs receive -vFd $POOL_NAME
		if [ -n "${OPT_DONT_PRESERVE_DIST_SNAP-}" ]; then
			zfs destroy $POOL_NAME/os/$BASEOS_TYPE/src/obj/$BASEOS_VER@dist
		fi
	else
		tar -cpf - -C /usr obj | tar -xpvf - -C $POOL_MNT/usr
		if [ -z "${OPT_DONT_PRESERVE_DIST_SNAP-}" ]; then
			zfs snapshot $POOL_NAME/os/$BASEOS_TYPE/src/obj/$BASEOS_VER@dist
		fi
	fi
fi
zfs unmount $POOL_NAME/os/$BASEOS_TYPE/src/$BASEOS_VER
zfs unmount $POOL_NAME/os/$BASEOS_TYPE/src/obj/$BASEOS_VER

snaptime=`date +%s`

zfs create -o mountpoint=none -o canmount=off $POOL_NAME/os/$BASEOS_TYPE/ports
zfs create -o mountpoint=none -o canmount=off $POOL_NAME/os/$BASEOS_TYPE/ports/src
zfs create -o mountpoint=/var/db/portsnap $POOL_NAME/os/$BASEOS_TYPE/ports/snap-db
zfs create -o mountpoint=/usr/ports $POOL_NAME/os/$BASEOS_TYPE/ports/src/head
zfs create -o mountpoint=/usr/ports/distfiles $POOL_NAME/os/$BASEOS_TYPE/ports/distfiles
zfs unmount $POOL_NAME/os/$BASEOS_TYPE/ports/distfiles
if [ -n "${COPY_PORTS-}" ]; then
	if [ -z "${OPT_FORCE_BUILD-}" -a -n "${POOL_BOOT_NAME-}" ] \
		&& zfs list $POOL_BOOT_NAME/os/$BASEOS_TYPE/ports/snap-db
	then
		zfs snapshot $POOL_BOOT_NAME/os/$BASEOS_TYPE/ports/snap-db@$snaptime
		zfs send $POOL_BOOT_NAME/os/$BASEOS_TYPE/ports/snap-db@$snaptime | zfs receive -vF $POOL_NAME/os/$BASEOS_TYPE/ports/snap-db
		zfs destroy $POOL_BOOT_NAME/os/$BASEOS_TYPE/ports/snap-db@$snaptime
		zfs destroy $POOL_NAME/os/$BASEOS_TYPE/ports/snap-db@$snaptime
	else
		require_portsnap_files
		tar -cpf - -C /var/db portsnap | tar -xpvf - -C $POOL_MNT/var/db
	fi
	if [ -z "${OPT_DONT_PRESERVE_DIST_SNAP-}" ]; then
		zfs snapshot $POOL_NAME/os/$BASEOS_TYPE/ports/snap-db@dist
	fi
	if [ -z "${OPT_FORCE_BUILD-}" -a -n "${POOL_BOOT_NAME-}" ] \
		&& zfs list $POOL_BOOT_NAME/os/$BASEOS_TYPE/ports/src/head
	then
		zfs snapshot $POOL_BOOT_NAME/os/$BASEOS_TYPE/ports/src/head@$snaptime
		zfs send $POOL_BOOT_NAME/os/$BASEOS_TYPE/ports/src/head@$snaptime | zfs receive -vF $POOL_NAME/os/$BASEOS_TYPE/ports/src/head
		zfs destroy $POOL_BOOT_NAME/os/$BASEOS_TYPE/ports/src/head@$snaptime
		zfs destroy $POOL_NAME/os/$BASEOS_TYPE/ports/src/head@$snaptime
	else
		portsnap -d $POOL_MNT/var/db/portsnap -f $POOL_MNT/etc/portsnap.conf -p $POOL_MNT/usr/ports extract
		if [ -d /usr/ports/local ]; then
			tar -cpf - -C /usr/ports local | tar -xpvf - -C $POOL_MNT/usr/ports
		fi
	fi
	if [ -z "${OPT_DONT_PRESERVE_DIST_SNAP-}" ]; then
		zfs snapshot $POOL_NAME/os/$BASEOS_TYPE/ports/src/head@dist
	fi
fi
zfs unmount $POOL_NAME/os/$BASEOS_TYPE/ports/snap-db
zfs unmount $POOL_NAME/os/$BASEOS_TYPE/ports/src/head

zfs create -o mountpoint=none -o canmount=off $POOL_NAME/os/nuOS/pkg
zfs create -o mountpoint=/usr/ports/packages $POOL_NAME/os/nuOS/pkg/$NUOS_VER
if [ -n "${COPY_DEV_PKGS-}" ]; then
	if [ -z "${OPT_FORCE_BUILD-}" -a -n "${POOL_BOOT_NAME-}" ] \
		&& zfs list $POOL_BOOT_NAME/os/nuOS/pkg/$NUOS_VER
	then
		zfs snapshot $POOL_BOOT_NAME/os/nuOS/pkg/$NUOS_VER@$snaptime
		zfs send $POOL_BOOT_NAME/os/nuOS/pkg/$NUOS_VER@$snaptime | zfs receive -vF $POOL_NAME/os/nuOS/pkg/$NUOS_VER
		zfs destroy $POOL_BOOT_NAME/os/nuOS/pkg/$NUOS_VER@$snaptime
		zfs destroy $POOL_NAME/os/nuOS/pkg/$NUOS_VER@$snaptime
	else
		tar -cpf - -C /usr/ports packages | tar -xpvf - -C $POOL_MNT/usr/ports
	fi
	if [ -z "${OPT_DONT_PRESERVE_DIST_SNAP-}" ]; then
		zfs snapshot $POOL_NAME/os/nuOS/pkg/$NUOS_VER@dist
	fi
fi
zfs unmount $POOL_NAME/os/nuOS/pkg/$NUOS_VER

zfs set mountpoint=none $POOL_NAME/os/nuOS/$NUOS_VER
zfs set canmount=off $POOL_NAME/os/nuOS/$NUOS_VER

zfs create -o mountpoint=none -o canmount=off $POOL_NAME/sys
zfs clone -o mountpoint=/ -o canmount=noauto $POOL_NAME/os/nuOS/$NUOS_VER@base $POOL_NAME/sys/rescue
zfs clone $POOL_NAME/os/nuOS/$NUOS_VER/etc@base $POOL_NAME/sys/rescue/etc
zfs clone $POOL_NAME/os/nuOS/$NUOS_VER/var@base $POOL_NAME/sys/rescue/var
zfs clone $POOL_NAME/os/nuOS/$NUOS_VER/var/db@base $POOL_NAME/sys/rescue/var/db
zfs create -o mountpoint=none -o canmount=off -o logbias=throughput -o sync=disabled $POOL_NAME/entropy
zfs create -o mountpoint=/var/db/entropy $POOL_NAME/entropy/rescue

mkdir $POOL_MNT/boot/etc
mv -n $POOL_MNT/etc/login.conf.db $POOL_MNT/boot/etc/
ln -s ../boot/etc/login.conf.db $POOL_MNT/etc/login.conf.db
zfs unmount $POOL_NAME/sys/rescue/etc
ln -s ../boot/etc/login.conf.db $POOL_MNT/etc/login.conf.db
zfs mount $POOL_NAME/sys/rescue/etc


require_tmp -d tempdir
if [ -n "${INJECT_CACHE-}" ]; then
	[ ! -f $POOL_MNT/boot/zfs/zpool.cache ]
	cp "$INJECT_CACHE" $POOL_MNT/boot/zfs/zpool.cache
	[ -f "$tempdir/zpool.cache" ] && rm "$tempdir/zpool.cache" || true
else
	mv -n "$tempdir/zpool.cache" $POOL_MNT/boot/zfs/
fi
rmdir "$tempdir"

zfs snapshot -r $POOL_NAME/sys/rescue@sys

if [ -n "${OPT_ELI-}" ]; then
	swap_fstab_entry="/dev/zvol/$POOL_NAME/swap/one.eli none swap sw 0 0"
else
	swap_prop_args="-o org.freebsd:swap=on"
fi
create_swap_vol_cmd="zfs create -o mountpoint=none -o canmount=off -o primarycache=metadata ${swap_prop_args-} $POOL_NAME/swap"
$create_swap_vol_cmd

if [ -n "$SWAP_SIZE" -a "$SWAP_SIZE" != 0 ]; then
	zfs create -b 4K -V $SWAP_SIZE $POOL_NAME/swap/one
	zfs snapshot $POOL_NAME/swap/one@blank
fi

cat >> $POOL_MNT/etc/rc.conf.local <<'EOF'
zfs_enable="NO"
EOF

cat >> $POOL_MNT/etc/fstab <<EOF
$POOL_NAME/sys/rescue/var /var zfs rw 0 0
$POOL_NAME/sys/rescue/var/db /var/db zfs rw 0 0
EOF
if [ -n "${OPT_ELI-}" ]; then
	cat >> $POOL_MNT/etc/fstab <<EOF
$swap_fstab_entry
EOF
fi

cat > $POOL_MNT/boot/loader.conf.local <<EOF
vfs.root.mountfrom="zfs:$POOL_NAME/sys/rescue"
EOF

zfs set canmount=noauto $POOL_NAME/entropy/rescue
zfs unmount $POOL_NAME/entropy/rescue
zfs set canmount=noauto $POOL_NAME/sys/rescue/etc
zfs set canmount=noauto $POOL_NAME/sys/rescue/var
zfs set canmount=noauto $POOL_NAME/sys/rescue/var/db
zfs unmount $POOL_NAME/sys/rescue
zfs set mountpoint=legacy $POOL_NAME/sys/rescue/var
zfs set mountpoint=legacy $POOL_NAME/sys/rescue/var/db
zfs snapshot -r $POOL_NAME/sys/rescue@boot

host_ds=$POOL_NAME/sys/host

zfs clone -o mountpoint=/ -o canmount=noauto $POOL_NAME/sys/rescue@sys $host_ds
zfs clone $POOL_NAME/sys/rescue/etc@sys $host_ds/etc
zfs clone $POOL_NAME/sys/rescue/var@sys $host_ds/var
zfs clone $POOL_NAME/sys/rescue/var/db@sys $host_ds/var/db

zfs snapshot -r $host_ds@blank

export NEW_HOST
sister nu_jail -C $POOL_MNT -p $POOL_NAME -t clone -w -j base-lab -o $BASEOS_TYPE/$BASEOS_VER -s bare -i 127.0.0.2 -a '' -u '' -b '' -q
sister nu_jail -C $POOL_MNT -p $POOL_NAME -t clone -w -j nuos-lab -s blank -i 127.0.0.3 -a '' -u '' -b '' -q
sister nu_jail -C $POOL_MNT -p $POOL_NAME -t clone -w -j lab -i 127.0.0.4 -a '' -u '' -b '' -q

sister enable_svc -C $POOL_MNT jail2

zfs snapshot -r $host_ds@bare

zfs create -o mountpoint=/var/db/entropy $POOL_NAME/entropy/host

cat > $POOL_MNT/boot/loader.conf.local <<EOF
vfs.root.mountfrom="zfs:$host_ds"
EOF

if [ -n "${OPT_ELI-}" ]; then
	cat >> $POOL_MNT/etc/fstab <<EOF
$swap_fstab_entry
EOF
fi

cat >> $POOL_MNT/etc/rc.conf.local <<EOF
hostname="$NEW_HOST"
EOF

cat >> $POOL_MNT/etc/nuos.conf <<EOF
POOL_BOOT_NAME=$POOL_NAME
EOF

if [ -n "${OPT_ELI-}" ]; then
	private_chunk=$((`zfs get -H -p available $POOL_NAME | cut -w -f 3`/24/4096*4096))
	zfs create -s -b 4K -V $private_chunk -o compression=off -o checksum=off $POOL_NAME/private
	pvt_eli_key_dev=`mdconfig -s 1440k`
	gpart create -s GPT $pvt_eli_key_dev
	gpart add -s 1 -t !$blank_key_gpt_type -l $POOL_NAME-key $pvt_eli_key_dev
	
	(umask 77 && mkdir $POOL_MNT/etc/ssl/private)
	chflags schg $POOL_MNT/etc/ssl/private
	(umask 77 && mkdir $POOL_MNT/etc/ssh/private)
	chflags schg $POOL_MNT/etc/ssh/private
	for key_filename in ssh_host_dsa_key ssh_host_ecdsa_key ssh_host_key ssh_host_rsa_key; do
		(umask 77 && ln -s private/$key_filename $POOL_MNT/etc/ssh/$key_filename)
	done
	
	cat >> $POOL_MNT/etc/rc.conf.local <<EOF
geli_devices="zvol/$POOL_NAME/private"
geli_zvol_${POOL_NAME}_private_autodetach="NO"
geli_zvol_${POOL_NAME}_private_flags="-p -k /dev/gpt/$POOL_NAME-key"
nuos_pvt_init_enable="YES"
nuos_zpool_enable="YES"
nuos_zpool_list="$POOL_NAME-pvt"
EOF
fi

sed -i '' -e "s/\.my\.domain\$/.`echo $NEW_HOST | sed -e 's/^[^\.]*\.//'` $NEW_HOST `echo $NEW_HOST | sed -e 's/\..*//'`/" $POOL_MNT/etc/hosts

(umask 77 && dd if=/dev/random of=$POOL_MNT/var/db/entropy/seed count=1 bs=4k)

zfs snapshot -r $host_ds@boot
zpool set bootfs=$host_ds $POOL_NAME

home_ds=$POOL_NAME/home

zfs create -o mountpoint=/home $home_ds

admin_install -z $POOL_MNT

zfs snapshot -r $host_ds@login
zfs snapshot -r $home_ds@login

if [ -n "${LOCAL_SCRIPT-}" ]; then
	if [ -d "${LOCAL_SCRIPT-}" ]; then
		script_files=`rcorder "$LOCAL_SCRIPT"/*.sh`
		for script_file in "$script_files"; do
			. "$script_file"
		done
	fi
	if [ -f "${LOCAL_SCRIPT-}" ]; then
		. "$LOCAL_SCRIPT"
	fi
fi

zfs snapshot -r $host_ds@genesis
zfs snapshot -r $home_ds@genesis

if [ -z "${must_build-}" -a -n "${OPT_DEBUG-}" ]; then
	require_tmp bpl
	require_tmp pl
	require_tmp -l zpool_report report
	zfs get -H -t all -o name,property,value -r mountpoint,canmount $POOL_BOOT_NAME | sed -e "s|^$POOL_BOOT_NAME|_pool|" >| "$bpl"
	zfs get -H -t all -o name,property,value -r mountpoint,canmount $POOL_NAME | sed -e "s|^$POOL_NAME|_pool|;s|/$POOL_NAME\$|/|;s|/$POOL_NAME||" >| "$pl"
	diff "$bpl" "$pl" >| "$report" && rm "$report" || echo 'WARNING DEBUG: installer reported differences in zpool layout' >&2
	rm "$bpl" "$pl"
fi

if [ -n "${OPT_ELI-}" ]; then
	echo "NOTICE: Blank key is created in memory device $pvt_eli_key_dev."
fi
echo "Initialization of $NEW_HOST running nuOS/$NUOS_VER over $BASEOS_TYPE-$BASEOS_VER onto pool $POOL_NAME is complete."
