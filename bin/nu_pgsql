#!/bin/sh
set -e; set -u; set -C

# nuOS 0.0.11.2a1 - bin/nu_pgsql
#
# Copyright (c) 2008-2018 Chad Jacob Milios and Crop Circle Systems.
# All rights reserved.
#
# This Source Code Form is subject to the terms of the Simplified BSD License.
# If a copy of the Simplified BSD License was not distributed alongside this file, you can
# obtain one at https://www.freebsd.org/copyright/freebsd-license.html . This software
# project is not affiliated with the FreeBSD Project.
#
# Official updates and community support available at https://nuos.org .
# Professional services available at https://ccsys.com .

NUOS_VER=0.0.11.2a1

while getopts C:h:nsv OPT; do case $OPT in
	C) CHROOTDIR=$OPTARG;;
	h) HOST_NAME=$OPTARG;;
	n) OPT_NETWORK=y;;
	s) OPT_SSL=y;;
	v) OPT_VERBOSE=y;;
esac; done; shift $(($OPTIND-1))
[ $# = 0 ]

[ -z "${CHROOTDIR-}" ] || exit 43 # initdb requires the system up so CHROOTDIR is unsupported, though we want to remedy this some day so most of the code is still written with support

. "$(dirname "$(realpath "$0")")/../lib/nu_system.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_common.sh"

nuos_init

echo -n 'network access  -n OPT_NETWORK      ' && [ -n "${OPT_NETWORK-}" ] && echo set || echo null
echo -n 'ssl             -s OPT_SSL          ' && [ -n "${OPT_NETWORK-}" ] && echo set || echo n/a
echo -n 'host name       -h HOST_NAME        ' && [ -n "${OPT_NETWORK-}" -a -n "${OPT_SSL-}" ] && echo ${HOST_NAME:=$HOST} || echo n/a
echo

maybe_yell

: ${SHORT_VER:=10} # currently supporting PostgreSQL 10.1

pghome=`${CHROOTDIR:+chroot "$CHROOTDIR"} pw usershow postgres | cut -d : -f 9`
[ -e "${CHROOTDIR-}$pghome" ]
pg_="$pghome/data$SHORT_VER"
pg="${CHROOTDIR-}$pg_"
[ ! -e "$pg" ]
which expect

sister enable_svc ${CHROOTDIR:+-C "$CHROOTDIR"} postgresql
echo 'postgresql_initdb_flags="-E utf-8 --lc-collate=C -A md5 -W"' >> "${CHROOTDIR-}/etc/rc.conf.d/postgresql"

rand_token=`sister nu_randpw`
${CHROOTDIR:+chroot "$CHROOTDIR"} expect -n -c '
	set timeout -1
	expect_user "*\n"
	set pw $expect_out(0,string)
	spawn service postgresql initdb
	expect "superuser password: "
	send -- "$pw\r"
	expect "again: "
	send -- "$pw\r"
	expect "Success."
	expect eof
' <<EOF
$rand_token
EOF
[ -f "$pg/PG_VERSION" ]
(umask 77 && cat > "${CHROOTDIR-}$pghome/.pgpass") <<EOF
localhost:*:*:postgres:$rand_token
EOF
chown postgres:postgres "${CHROOTDIR-}$pghome/.pgpass"

if [ -n "${OPT_NETWORK-}" ]; then
	cat >> "$pg/postgresql.conf" <<'EOF'
listen_addresses = '*'
EOF
	if [ -n "${OPT_SSL-}" ]; then
		SSL="${CHROOTDIR-}/etc/ssl"
		mkdir "$pg/ssl"
		${CHROOTDIR:+chroot "$CHROOTDIR"} chown postgres $pg_/ssl
		(umask 77 && mkdir "$pg/ssl/private")
		${CHROOTDIR:+chroot "$CHROOTDIR"} chown postgres $pg_/ssl/private
		if zfs list $POOL_BOOT_NAME-pvt > /dev/null 2>&1; then # this check will need to be refined if ever we support CHROOTDIR
			chflags schg "$pg/ssl/private"
			zfs create -o mountpoint=$pg_/ssl/private $POOL_BOOT_NAME-pvt/sys/host/pgsql-ssl
			chmod go-rx "$pg/ssl/private"
			${CHROOTDIR:+chroot "$CHROOTDIR"} chown postgres:postgres $pg_/ssl/private
		fi
		if ! cp "$SSL/certs/$HOST_NAME.crt" "$pg/ssl/"; then
			cp "$SSL/certs/$HOST_NAME.internal.crt" "$pg/ssl/$HOST_NAME.crt"
			internal=y
		fi
		${CHROOTDIR:+chroot "$CHROOTDIR"} chown postgres $pg_/ssl/$HOST_NAME.crt
		cp "$SSL/private/$HOST_NAME.key" "$pg/ssl/private/"
		${CHROOTDIR:+chroot "$CHROOTDIR"} chown postgres $pg_/ssl/private/$HOST_NAME.key
		if [ -f "$SSL/certs/$HOST_NAME.ca.crt" ]; then
			cat "$SSL/certs/$HOST_NAME.ca.crt" >> "$pg/ssl/$HOST_NAME.crt"
		fi
		mkdir -p "$SSL/certs.installed/localhost/$HOST_NAME.full.${internal:+internal.}crt"
		ln -s "$pg_/ssl/$HOST_NAME.crt" "$SSL/certs.installed/localhost/$HOST_NAME.full.${internal:+internal.}crt/postgres$SHORT_VER"
		cat >> "$pg/postgresql.conf" <<EOF
ssl = on
ssl_cert_file = 'ssl/$HOST_NAME.crt'
ssl_key_file = 'ssl/private/$HOST_NAME.key'
EOF
	fi
fi

echo "Configured PostgreSQL database."
