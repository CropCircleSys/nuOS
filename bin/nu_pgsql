#!/bin/sh
set -e; set -u; set -C

# nuOS 0.0.9.2a24 - bin/nu_pgsql - LICENSE: MOZ_PUB
#
# Copyright (c) 2008-2014 Chad Jacob Milios and Crop Circle Systems, Inc.
# All rights reserved.
#
# This Source Code Form is subject to the terms of the Mozilla Public License, v2.0.
# If a copy of the MPL was not distributed alongside this file, you can obtain one at
# http://mozilla.org/MPL/2.0/ . This software project is not affiliated with the Mozilla
# Foundation.
#
# Official updates and community support available at http://nuos.org .
# Other licensing options and professional services available at http://ccsys.com .

NUOS_VER=0.0.9.2a24

while getopts C:h:nsv OPT; do case $OPT in
	C) CHROOTDIR=$OPTARG;;
	h) HOST_NAME=$OPTARG;;
	n) OPT_NETWORK=y;;
	s) OPT_SSL=y;;
	v) OPT_VERBOSE=y;;
esac; done; shift $(($OPTIND-1))
[ $# = 0 ]

[ -z "${CHROOTDIR-}" ] || exit 43 # initdb requires the system up so CHROOTDIR is unsupported, though we want to remedy this some day so most of the code is still written with support

. "$(dirname "$(realpath "$0")")/../lib/nu_system.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_common.sh"

nuos_init

echo -n 'network access  -n OPT_NETWORK      ' && [ -n "${OPT_NETWORK-}" ] && echo set || echo null
echo -n 'ssl             -s OPT_SSL          ' && [ -n "${OPT_NETWORK-}" ] && echo set || echo n/a
echo -n 'host name       -h HOST_NAME        ' && [ -n "${OPT_NETWORK-}" -a -n "${OPT_SSL-}" ] && echo ${HOST_NAME:=$HOST} || echo n/a
echo

maybe_yell

pghome=`${CHROOTDIR:+chroot "$CHROOTDIR"} pw usershow pgsql | cut -d : -f 9`
[ ! -e "${CHROOTDIR-}$pghome/data" ]

sister enable_svc ${CHROOTDIR:+-C "$CHROOTDIR"} postgresql
${CHROOTDIR:+chroot "$CHROOTDIR"} service postgresql initdb

if [ -n "${OPT_NETWORK-}" ]; then
	cat >> "${CHROOTDIR-}$pghome/data/postgresql.conf" <<'EOF'
listen_addresses = '*'
EOF
	if [ -n "${OPT_SSL-}" ]; then
		mkdir "${CHROOTDIR-}$pghome/data/ssl"
		${CHROOTDIR:+chroot "$CHROOTDIR"} chown pgsql $pghome/data/ssl
		(umask 77 && mkdir "${CHROOTDIR-}$pghome/data/ssl/private")
		${CHROOTDIR:+chroot "$CHROOTDIR"} chown pgsql $pghome/data/ssl/private
		if zfs list $POOL_BOOT_NAME/private > /dev/null 2>&1; then # this check will need to be refined if ever we support CHROOTDIR
			chflags schg "${CHROOTDIR-}$pghome/data/ssl/private"
			zfs create -o mountpoint=$pghome/data/ssl/private $POOL_BOOT_NAME-pvt/sys/host/pgsql-ssl
			chmod go-rx "${CHROOTDIR-}$pghome/data/ssl/private"
			${CHROOTDIR:+chroot "$CHROOTDIR"} chown pgsql:pgsql $pghome/data/ssl/private
		fi
		cp "${CHROOTDIR-}/etc/ssl/certs/$HOST_NAME.crt" "${CHROOTDIR-}$pghome/data/ssl/"
		${CHROOTDIR:+chroot "$CHROOTDIR"} chown pgsql $pghome/data/ssl/$HOST_NAME.crt
		cp "${CHROOTDIR-}/etc/ssl/private/$HOST_NAME.key" "${CHROOTDIR-}$pghome/data/ssl/private/"
		${CHROOTDIR:+chroot "$CHROOTDIR"} chown pgsql $pghome/data/ssl/private/$HOST_NAME.key
		if [ -f "${CHROOTDIR-}/etc/ssl/certs/$HOST_NAME.ca.crt" ]; then
			cat "${CHROOTDIR-}/etc/ssl/certs/$HOST_NAME.ca.crt" >> "${CHROOTDIR-}$pghome/data/ssl/$HOST_NAME.crt"
		fi
		cat >> "${CHROOTDIR-}$pghome/data/postgresql.conf" <<EOF
ssl = on
ssl_cert_file = 'ssl/$HOST_NAME.crt'
ssl_key_file = 'ssl/private/$HOST_NAME.key'
EOF
	fi
fi

echo "Configured PostgreSQL database."
